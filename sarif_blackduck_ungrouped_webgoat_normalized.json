{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"Blackduck Intelligent","rules":[{"id":"BDSA-2018-1836 Apache Ant 1.6.2","shortDescription":{"text":"[D] Dependency: Apache Ant 1.6.2 (BDSA-2018-1836)"},"fullDescription":{"text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"help":{"markdown":"# BDSA-2018-1836 Apache Ant 1.6.2\n## Upgrade Guidance\n\n**Short Term** - 1.6.5\n\n**Long Term** - 1.6.5\n\n## Description\nApache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2018-1836](https://nvd.nist.gov/vuln/detail/BDSA-2018-1836)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html\n\n","text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-22","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-2083 Apache Ant 1.6.2","shortDescription":{"text":"[D] Dependency: Apache Ant 1.6.2 (BDSA-2021-2083)"},"fullDescription":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"help":{"markdown":"# BDSA-2021-2083 Apache Ant 1.6.2\n## Upgrade Guidance\n\n**Short Term** - 1.6.5\n\n**Long Term** - 1.6.5\n\n## Description\nApache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\".\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-2083](https://nvd.nist.gov/vuln/detail/BDSA-2021-2083)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2012-0078 Apache Ant 1.6.2","shortDescription":{"text":"[D] Dependency: Apache Ant 1.6.2 (BDSA-2012-0078)"},"fullDescription":{"text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"help":{"markdown":"# BDSA-2012-0078 Apache Ant 1.6.2\n## Upgrade Guidance\n\n**Short Term** - 1.6.5\n\n**Long Term** - 1.6.5\n\n## Description\nApache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2012-0078](https://nvd.nist.gov/vuln/detail/BDSA-2012-0078)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-1945 Apache Ant 1.6.2","shortDescription":{"text":"[D] Dependency: Apache Ant 1.6.2 (CVE-2020-1945 BDSA-2020-1128)"},"fullDescription":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"help":{"markdown":"# CVE-2020-1945 Apache Ant 1.6.2\n## Upgrade Guidance\n\n**Short Term** - 1.6.5\n\n**Long Term** - 1.6.5\n\n## Description\nApache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-1945](https://nvd.nist.gov/vuln/detail/CVE-2020-1945)\n\n### BDSA: [M] [BDSA-2020-1128](https://nvd.nist.gov/vuln/detail/BDSA-2020-1128)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html\n\n","text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-200","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2020-2577 Apache Ant 1.6.2","shortDescription":{"text":"[D] Dependency: Apache Ant 1.6.2 (BDSA-2020-2577)"},"fullDescription":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"help":{"markdown":"# BDSA-2020-2577 Apache Ant 1.6.2\n## Upgrade Guidance\n\n**Short Term** - 1.6.5\n\n**Long Term** - 1.6.5\n\n## Description\nApache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2020-2577](https://nvd.nist.gov/vuln/detail/BDSA-2020-2577)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html\n\n","text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-200","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-2085 Apache Ant 1.6.2","shortDescription":{"text":"[D] Dependency: Apache Ant 1.6.2 (BDSA-2021-2085)"},"fullDescription":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"help":{"markdown":"# BDSA-2021-2085 Apache Ant 1.6.2\n## Upgrade Guidance\n\n**Short Term** - 1.6.5\n\n**Long Term** - 1.6.5\n\n## Description\nApache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-2085](https://nvd.nist.gov/vuln/detail/BDSA-2021-2085)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-29425 Apache Commons IO 2.6","shortDescription":{"text":"[D] Dependency: Apache Commons IO 2.6 (CVE-2021-29425 BDSA-2021-0922)"},"fullDescription":{"text":"Apache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view."},"help":{"markdown":"# CVE-2021-29425 Apache Commons IO 2.6\n## Upgrade Guidance\n\n**Short Term** - 2.14.0\n\n**Long Term** - 20030203.000550\n\n## Description\nApache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-29425](https://nvd.nist.gov/vuln/detail/CVE-2021-29425)\n\n### BDSA: [M] [BDSA-2021-0922](https://nvd.nist.gov/vuln/detail/BDSA-2021-0922)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html\n\n","text":"Apache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-22","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-17521 Apache Groovy 2.5.8: REST Assured 3.3.0","shortDescription":{"text":"[T] Dependency: Apache Groovy 2.5.8 thru REST Assured 3.3.0 (CVE-2020-17521 BDSA-2020-3660)"},"fullDescription":{"text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"help":{"markdown":"# CVE-2020-17521 Apache Groovy 2.5.8: REST Assured 3.3.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - 5.3.2\n\n## Description\nApache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-17521](https://nvd.nist.gov/vuln/detail/CVE-2020-17521)\n\n### BDSA: [M] [BDSA-2020-3660](https://nvd.nist.gov/vuln/detail/BDSA-2020-3660)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html\n\n","text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-379","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-13956 Apache HttpClient 4.5.10: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Apache HttpClient 4.5.10 thru WireMock 2.8.0 (CVE-2020-13956 BDSA-2020-2701)"},"fullDescription":{"text":"Apache HttpClient is vulnerable to the disclosure and modification of data due to the mishandling of malformed URIs. An attacker could pass a maliciously crafted request to a vulnerable application, which will then be executed on an incorrect host."},"help":{"markdown":"# CVE-2020-13956 Apache HttpClient 4.5.10: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nApache HttpClient is vulnerable to the disclosure and modification of data due to the mishandling of malformed URIs. An attacker could pass a maliciously crafted request to a vulnerable application, which will then be executed on an incorrect host.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-13956](https://nvd.nist.gov/vuln/detail/CVE-2020-13956)\n\n### BDSA: [M] [BDSA-2020-2701](https://nvd.nist.gov/vuln/detail/BDSA-2020-2701)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Apache HttpClient is vulnerable to the disclosure and modification of data due to the mishandling of malformed URIs. An attacker could pass a maliciously crafted request to a vulnerable application, which will then be executed on an incorrect host."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-20676 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Bootstrap (Twitter) 3.0.2 thru WireMock 2.8.0 (CVE-2018-20676 BDSA-2018-4636)"},"fullDescription":{"text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"help":{"markdown":"# CVE-2018-20676 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nA reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2018-20676](https://nvd.nist.gov/vuln/detail/CVE-2018-20676)\n\n### BDSA: [H] [BDSA-2018-4636](https://nvd.nist.gov/vuln/detail/BDSA-2018-4636)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2016-10735 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Bootstrap (Twitter) 3.0.2 thru WireMock 2.8.0 (CVE-2016-10735 BDSA-2016-1585)"},"fullDescription":{"text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"help":{"markdown":"# CVE-2016-10735 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nBootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2016-10735](https://nvd.nist.gov/vuln/detail/CVE-2016-10735)\n\n### BDSA: [H] [BDSA-2016-1585](https://nvd.nist.gov/vuln/detail/BDSA-2016-1585)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2018-20677 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Bootstrap (Twitter) 3.0.2 thru WireMock 2.8.0 (CVE-2018-20677 BDSA-2018-4634)"},"fullDescription":{"text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"help":{"markdown":"# CVE-2018-20677 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nA stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2018-20677](https://nvd.nist.gov/vuln/detail/CVE-2018-20677)\n\n### BDSA: [H] [BDSA-2018-4634](https://nvd.nist.gov/vuln/detail/BDSA-2018-4634)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2019-8331 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Bootstrap (Twitter) 3.0.2 thru WireMock 2.8.0 (CVE-2019-8331 BDSA-2019-0423)"},"fullDescription":{"text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"help":{"markdown":"# CVE-2019-8331 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nbootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2019-8331](https://nvd.nist.gov/vuln/detail/CVE-2019-8331)\n\n### BDSA: [H] [BDSA-2019-0423](https://nvd.nist.gov/vuln/detail/BDSA-2019-0423)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2019-0423 Bootstrap (Twitter) v4.2.0: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Bootstrap (Twitter) v4.2.0 thru WireMock 2.8.0 (BDSA-2019-0423)"},"fullDescription":{"text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"help":{"markdown":"# BDSA-2019-0423 Bootstrap (Twitter) v4.2.0: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nbootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2019-0423](https://nvd.nist.gov/vuln/detail/BDSA-2019-0423)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2019-8331 Bootstrap (Twitter) 3.3.7","shortDescription":{"text":"[D] Dependency: Bootstrap (Twitter) 3.3.7 (CVE-2019-8331 BDSA-2019-0423)"},"fullDescription":{"text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"help":{"markdown":"# CVE-2019-8331 Bootstrap (Twitter) 3.3.7\n## Upgrade Guidance\n\n**Short Term** - 3.4.1\n\n**Long Term** - 5.3.2\n\n## Description\nbootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2019-8331](https://nvd.nist.gov/vuln/detail/CVE-2019-8331)\n\n### BDSA: [H] [BDSA-2019-0423](https://nvd.nist.gov/vuln/detail/BDSA-2019-0423)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-79","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2018-20676 Bootstrap (Twitter) 3.3.7","shortDescription":{"text":"[D] Dependency: Bootstrap (Twitter) 3.3.7 (CVE-2018-20676 BDSA-2018-4636)"},"fullDescription":{"text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"help":{"markdown":"# CVE-2018-20676 Bootstrap (Twitter) 3.3.7\n## Upgrade Guidance\n\n**Short Term** - 3.4.1\n\n**Long Term** - 5.3.2\n\n## Description\nA reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2018-20676](https://nvd.nist.gov/vuln/detail/CVE-2018-20676)\n\n### BDSA: [H] [BDSA-2018-4636](https://nvd.nist.gov/vuln/detail/BDSA-2018-4636)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-79","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2018-20677 Bootstrap (Twitter) 3.3.7","shortDescription":{"text":"[D] Dependency: Bootstrap (Twitter) 3.3.7 (CVE-2018-20677 BDSA-2018-4634)"},"fullDescription":{"text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"help":{"markdown":"# CVE-2018-20677 Bootstrap (Twitter) 3.3.7\n## Upgrade Guidance\n\n**Short Term** - 3.4.1\n\n**Long Term** - 5.3.2\n\n## Description\nA stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2018-20677](https://nvd.nist.gov/vuln/detail/CVE-2018-20677)\n\n### BDSA: [H] [BDSA-2018-4634](https://nvd.nist.gov/vuln/detail/BDSA-2018-4634)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-79","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2016-10735 Bootstrap (Twitter) 3.3.7","shortDescription":{"text":"[D] Dependency: Bootstrap (Twitter) 3.3.7 (CVE-2016-10735 BDSA-2016-1585)"},"fullDescription":{"text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"help":{"markdown":"# CVE-2016-10735 Bootstrap (Twitter) 3.3.7\n## Upgrade Guidance\n\n**Short Term** - 3.4.1\n\n**Long Term** - 5.3.2\n\n## Description\nBootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2016-10735](https://nvd.nist.gov/vuln/detail/CVE-2016-10735)\n\n### BDSA: [H] [BDSA-2016-1585](https://nvd.nist.gov/vuln/detail/BDSA-2016-1585)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-79","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-25638 Hibernate ORM 5.4.9: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Hibernate ORM 5.4.9 thru Spring Boot 2.2.2.RELEASE (CVE-2020-25638 BDSA-2020-3410)"},"fullDescription":{"text":"Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."},"help":{"markdown":"# CVE-2020-25638 Hibernate ORM 5.4.9: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nHibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-25638](https://nvd.nist.gov/vuln/detail/CVE-2020-25638)\n\n### BDSA: [H] [BDSA-2020-3410](https://nvd.nist.gov/vuln/detail/BDSA-2020-3410)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html\n\n","text":"Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-89","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2019-14900 Hibernate ORM 5.4.9: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Hibernate ORM 5.4.9 thru Spring Boot 2.2.2.RELEASE (CVE-2019-14900 BDSA-2019-4479)"},"fullDescription":{"text":"Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."},"help":{"markdown":"# CVE-2019-14900 Hibernate ORM 5.4.9: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nHibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2019-14900](https://nvd.nist.gov/vuln/detail/CVE-2019-14900)\n\n### BDSA: [M] [BDSA-2019-4479](https://nvd.nist.gov/vuln/detail/BDSA-2019-4479)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html\n\n","text":"Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-89","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-10693 Hibernate Validator 6.0.18.Final: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Hibernate Validator 6.0.18.Final thru Spring Boot 2.2.2.RELEASE (CVE-2020-10693 BDSA-2020-1019)"},"fullDescription":{"text":"Hibernate Validator is vulnerable to incorrectly validating certain expression language (EL) expressions. A remote attacker could leverage this to bypass input sanitization"},"help":{"markdown":"# CVE-2020-10693 Hibernate Validator 6.0.18.Final: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nHibernate Validator is vulnerable to incorrectly validating certain expression language (EL) expressions. A remote attacker could leverage this to bypass input sanitization\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-10693](https://nvd.nist.gov/vuln/detail/CVE-2020-10693)\n\n### BDSA: [M] [BDSA-2020-1019](https://nvd.nist.gov/vuln/detail/BDSA-2020-1019)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Hibernate Validator is vulnerable to incorrectly validating certain expression language (EL) expressions. A remote attacker could leverage this to bypass input sanitization"},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-41853 HyperSQL Database Engine 2.5.0","shortDescription":{"text":"[D] Dependency: HyperSQL Database Engine 2.5.0 (CVE-2022-41853 BDSA-2022-3330)"},"fullDescription":{"text":"HyperSQL DataBase is vulnerable to remote code execution (RCE) due to improper input validation thus allowing unsafe reflection. An authenticated attacker could exploit this by supplying a crafted input to potentially execute code on the application."},"help":{"markdown":"# CVE-2022-41853 HyperSQL Database Engine 2.5.0\n## Upgrade Guidance\n\n**Short Term** - 2.7.2\n\n**Long Term** - 2.7.2\n\n## Description\nHyperSQL DataBase is vulnerable to remote code execution (RCE) due to improper input validation thus allowing unsafe reflection. An authenticated attacker could exploit this by supplying a crafted input to potentially execute code on the application.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2022-41853](https://nvd.nist.gov/vuln/detail/CVE-2022-41853)\n\n### BDSA: [H] [BDSA-2022-3330](https://nvd.nist.gov/vuln/detail/BDSA-2022-3330)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-470](https://cwe.mitre.org/data/definitions/470.html\n\n","text":"HyperSQL DataBase is vulnerable to remote code execution (RCE) due to improper input validation thus allowing unsafe reflection. An authenticated attacker could exploit this by supplying a crafted input to potentially execute code on the application."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-470","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-15250 JUnit 4.12","shortDescription":{"text":"[D] Dependency: JUnit 4.12 (CVE-2020-15250 BDSA-2020-2739)"},"fullDescription":{"text":"JUnit4 is vulnerable to information disclosure via the `TemporaryFolder` directory. A local user could exploit this vulnerability in order to read files and directories stored within this directory."},"help":{"markdown":"# CVE-2020-15250 JUnit 4.12\n## Upgrade Guidance\n\n**Short Term** - 4.13.2\n\n**Long Term** - 4.13.2\n\n## Description\nJUnit4 is vulnerable to information disclosure via the `TemporaryFolder` directory. A local user could exploit this vulnerability in order to read files and directories stored within this directory.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-15250](https://nvd.nist.gov/vuln/detail/CVE-2020-15250)\n\n### BDSA: [M] [BDSA-2020-2739](https://nvd.nist.gov/vuln/detail/BDSA-2020-2739)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html\n\n","text":"JUnit4 is vulnerable to information disclosure via the `TemporaryFolder` directory. A local user could exploit this vulnerability in order to read files and directories stored within this directory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-200","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-2110 Jakarta Expression Language 3.0 Implementation 3.0.3: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Jakarta Expression Language 3.0 Implementation 3.0.3 thru Spring Boot Undertow Starter 2.2.2.RELEASE (BDSA-2021-2110)"},"fullDescription":{"text":"Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."},"help":{"markdown":"# BDSA-2021-2110 Jakarta Expression Language 3.0 Implementation 3.0.3: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nJakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2021-2110](https://nvd.nist.gov/vuln/detail/BDSA-2021-2110)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-146](https://cwe.mitre.org/data/definitions/146.html\n\n","text":"Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-146","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-27216 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"# CVE-2020-27216 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)\n\n### BDSA: [H] [BDSA-2020-2949](https://nvd.nist.gov/vuln/detail/BDSA-2020-2949)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-362","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"# CVE-2023-26048 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)\n\n### BDSA: [M] [BDSA-2023-0887](https://nvd.nist.gov/vuln/detail/BDSA-2023-0887)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"# CVE-2022-2048 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)\n\n### BDSA: [M] [BDSA-2022-1887](https://nvd.nist.gov/vuln/detail/BDSA-2022-1887)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-664","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"# CVE-2021-28169 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)\n\n### BDSA: [M] [BDSA-2021-1714](https://nvd.nist.gov/vuln/detail/BDSA-2021-1714)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-22","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"# CVE-2023-40167 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)\n\n### BDSA: [M] [BDSA-2023-2470](https://nvd.nist.gov/vuln/detail/BDSA-2023-2470)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-130","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2023-2721 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"# BDSA-2023-2721 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2023-2721](https://nvd.nist.gov/vuln/detail/BDSA-2023-2721)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-190","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"# CVE-2023-26049 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)\n\n### BDSA: [M] [BDSA-2023-0888](https://nvd.nist.gov/vuln/detail/BDSA-2023-0888)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"# CVE-2020-27218 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)\n\n### BDSA: [M] [BDSA-2020-3580](https://nvd.nist.gov/vuln/detail/BDSA-2020-3580)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-226","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"# CVE-2020-27223 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)\n\n### BDSA: [M] [BDSA-2020-4221](https://nvd.nist.gov/vuln/detail/BDSA-2020-4221)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-407","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"# CVE-2021-28165 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)\n\n### BDSA: [M] [BDSA-2021-0848](https://nvd.nist.gov/vuln/detail/BDSA-2021-0848)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36479 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"# CVE-2023-36479 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)\n\n### BDSA: [L] [BDSA-2023-2464](https://nvd.nist.gov/vuln/detail/BDSA-2023-2464)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-149","patch_available"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"# CVE-2021-34428 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)\n\n### BDSA: [L] [BDSA-2021-1877](https://nvd.nist.gov/vuln/detail/BDSA-2021-1877)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-613","patch_available"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"# CVE-2023-41900 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)\n\n### BDSA: [L] [BDSA-2023-2461](https://nvd.nist.gov/vuln/detail/BDSA-2023-2461)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-287","patch_available"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2022-2047 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120 thru WireMock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"# CVE-2022-2047 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)\n\n### BDSA: [L] [BDSA-2022-1891](https://nvd.nist.gov/vuln/detail/BDSA-2022-1891)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-42550 Logback 1.2.3: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Logback 1.2.3 thru Spring Boot 2.2.2.RELEASE (CVE-2021-42550 BDSA-2021-3818)"},"fullDescription":{"text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"help":{"markdown":"# CVE-2021-42550 Logback 1.2.3: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nLogback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-42550](https://nvd.nist.gov/vuln/detail/CVE-2021-42550)\n\n### BDSA: [M] [BDSA-2021-3818](https://nvd.nist.gov/vuln/detail/BDSA-2021-3818)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3401 Logback 1.2.3: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Logback 1.2.3 thru Spring Boot 2.2.2.RELEASE (BDSA-2021-3401)"},"fullDescription":{"text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"help":{"markdown":"# BDSA-2021-3401 Logback 1.2.3: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nlogback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3401](https://nvd.nist.gov/vuln/detail/BDSA-2021-3401)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-297](https://cwe.mitre.org/data/definitions/297.html\n\n","text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-297","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-26520 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","shortDescription":{"text":"[D] Dependency: PostgreSQL JDBC Driver (pgjdbc) 42.2.8 (CVE-2022-26520 BDSA-2022-2080)"},"fullDescription":{"text":"pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application."},"help":{"markdown":"# CVE-2022-26520 PostgreSQL JDBC Driver (pgjdbc) 42.2.8\n## Upgrade Guidance\n\n**Short Term** - 42.6.0\n\n**Long Term** - 42.6.0\n\n## Description\npgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2022-26520](https://nvd.nist.gov/vuln/detail/CVE-2022-26520)\n\n### BDSA: [H] [BDSA-2022-2080](https://nvd.nist.gov/vuln/detail/BDSA-2022-2080)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html\n\n","text":"pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-94","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-13692 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","shortDescription":{"text":"[D] Dependency: PostgreSQL JDBC Driver (pgjdbc) 42.2.8 (CVE-2020-13692 BDSA-2020-1318)"},"fullDescription":{"text":"PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning"},"help":{"markdown":"# CVE-2020-13692 PostgreSQL JDBC Driver (pgjdbc) 42.2.8\n## Upgrade Guidance\n\n**Short Term** - 42.6.0\n\n**Long Term** - 42.6.0\n\n## Description\nPgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-13692](https://nvd.nist.gov/vuln/detail/CVE-2020-13692)\n\n### BDSA: [H] [BDSA-2020-1318](https://nvd.nist.gov/vuln/detail/BDSA-2020-1318)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html\n\n","text":"PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning"},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-611","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-21724 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","shortDescription":{"text":"[D] Dependency: PostgreSQL JDBC Driver (pgjdbc) 42.2.8 (CVE-2022-21724 BDSA-2022-1285)"},"fullDescription":{"text":"pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class."},"help":{"markdown":"# CVE-2022-21724 PostgreSQL JDBC Driver (pgjdbc) 42.2.8\n## Upgrade Guidance\n\n**Short Term** - 42.6.0\n\n**Long Term** - 42.6.0\n\n## Description\npgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2022-21724](https://nvd.nist.gov/vuln/detail/CVE-2022-21724)\n\n### BDSA: [H] [BDSA-2022-1285](https://nvd.nist.gov/vuln/detail/BDSA-2022-1285)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-665](https://cwe.mitre.org/data/definitions/665.html\n\n","text":"pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-665","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-31197 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","shortDescription":{"text":"[D] Dependency: PostgreSQL JDBC Driver (pgjdbc) 42.2.8 (CVE-2022-31197 BDSA-2022-2702)"},"fullDescription":{"text":"The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column."},"help":{"markdown":"# CVE-2022-31197 PostgreSQL JDBC Driver (pgjdbc) 42.2.8\n## Upgrade Guidance\n\n**Short Term** - 42.6.0\n\n**Long Term** - 42.6.0\n\n## Description\nThe PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-31197](https://nvd.nist.gov/vuln/detail/CVE-2022-31197)\n\n### BDSA: [M] [BDSA-2022-2702](https://nvd.nist.gov/vuln/detail/BDSA-2022-2702)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html\n\n","text":"The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-89","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-41946 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","shortDescription":{"text":"[D] Dependency: PostgreSQL JDBC Driver (pgjdbc) 42.2.8 (CVE-2022-41946 BDSA-2022-3347)"},"fullDescription":{"text":"PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above."},"help":{"markdown":"# CVE-2022-41946 PostgreSQL JDBC Driver (pgjdbc) 42.2.8\n## Upgrade Guidance\n\n**Short Term** - 42.6.0\n\n**Long Term** - 42.6.0\n\n## Description\nPostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-41946](https://nvd.nist.gov/vuln/detail/CVE-2022-41946)\n\n### BDSA: [M] [BDSA-2022-3347](https://nvd.nist.gov/vuln/detail/BDSA-2022-3347)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html\n\n","text":"PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-200","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-1471 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: SnakeYAML 1.25 thru Spring Boot 2.2.2.RELEASE (CVE-2022-1471 BDSA-2022-3447)"},"fullDescription":{"text":"SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."},"help":{"markdown":"# CVE-2022-1471 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2022-1471](https://nvd.nist.gov/vuln/detail/CVE-2022-1471)\n\n### BDSA: [H] [BDSA-2022-3447](https://nvd.nist.gov/vuln/detail/BDSA-2022-3447)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-25857 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: SnakeYAML 1.25 thru Spring Boot 2.2.2.RELEASE (CVE-2022-25857 BDSA-2022-2579)"},"fullDescription":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"help":{"markdown":"# CVE-2022-25857 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-25857](https://nvd.nist.gov/vuln/detail/CVE-2022-25857)\n\n### BDSA: [M] [BDSA-2022-2579](https://nvd.nist.gov/vuln/detail/BDSA-2022-2579)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-38751 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: SnakeYAML 1.25 thru Spring Boot 2.2.2.RELEASE (CVE-2022-38751 BDSA-2022-2587)"},"fullDescription":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."},"help":{"markdown":"# CVE-2022-38751 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-38751](https://nvd.nist.gov/vuln/detail/CVE-2022-38751)\n\n### BDSA: [M] [BDSA-2022-2587](https://nvd.nist.gov/vuln/detail/BDSA-2022-2587)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-229](https://cwe.mitre.org/data/definitions/229.html\n\n","text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-229","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-38752 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: SnakeYAML 1.25 thru Spring Boot 2.2.2.RELEASE (CVE-2022-38752 BDSA-2022-2590)"},"fullDescription":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."},"help":{"markdown":"# CVE-2022-38752 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-38752](https://nvd.nist.gov/vuln/detail/CVE-2022-38752)\n\n### BDSA: [M] [BDSA-2022-2590](https://nvd.nist.gov/vuln/detail/BDSA-2022-2590)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html\n\n","text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-121","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-41854 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: SnakeYAML 1.25 thru Spring Boot 2.2.2.RELEASE (CVE-2022-41854 BDSA-2022-3211)"},"fullDescription":{"text":"Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."},"help":{"markdown":"# CVE-2022-41854 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSnakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-41854](https://nvd.nist.gov/vuln/detail/CVE-2022-41854)\n\n### BDSA: [M] [BDSA-2022-3211](https://nvd.nist.gov/vuln/detail/BDSA-2022-3211)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html\n\n","text":"Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-121","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2017-18640 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: SnakeYAML 1.25 thru Spring Boot 2.2.2.RELEASE (CVE-2017-18640 BDSA-2017-3947)"},"fullDescription":{"text":"SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS)."},"help":{"markdown":"# CVE-2017-18640 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS).\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2017-18640](https://nvd.nist.gov/vuln/detail/CVE-2017-18640)\n\n### BDSA: [M] [BDSA-2017-3947](https://nvd.nist.gov/vuln/detail/BDSA-2017-3947)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-38749 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: SnakeYAML 1.25 thru Spring Boot 2.2.2.RELEASE (CVE-2022-38749 BDSA-2022-2577)"},"fullDescription":{"text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"help":{"markdown":"# CVE-2022-38749 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-38749](https://nvd.nist.gov/vuln/detail/CVE-2022-38749)\n\n### BDSA: [M] [BDSA-2022-2577](https://nvd.nist.gov/vuln/detail/BDSA-2022-2577)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html\n\n","text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-121","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-38750 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: SnakeYAML 1.25 thru Spring Boot 2.2.2.RELEASE (CVE-2022-38750 BDSA-2022-2578)"},"fullDescription":{"text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"help":{"markdown":"# CVE-2022-38750 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-38750](https://nvd.nist.gov/vuln/detail/CVE-2022-38750)\n\n### BDSA: [M] [BDSA-2022-2578](https://nvd.nist.gov/vuln/detail/BDSA-2022-2578)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html\n\n","text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-121","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# BDSA-2021-3731 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n\n\n### BDSA: [C] [BDSA-2021-3731](https://nvd.nist.gov/vuln/detail/BDSA-2021-3731)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# CVE-2022-22965 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)\n\n### BDSA: [C] [BDSA-2022-0858](https://nvd.nist.gov/vuln/detail/BDSA-2022-0858)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-749","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"# CVE-2023-20873 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)\n\n### BDSA: [H] [BDSA-2023-0953](https://nvd.nist.gov/vuln/detail/BDSA-2023-0953)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-284","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3817 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"# BDSA-2021-3817 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3817](https://nvd.nist.gov/vuln/detail/BDSA-2021-3817)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-835","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"# CVE-2023-20883 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)\n\n### BDSA: [M] [BDSA-2023-1225](https://nvd.nist.gov/vuln/detail/BDSA-2023-1225)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-345","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"# CVE-2022-27772 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)\n\n### BDSA: [M] [BDSA-2022-0856](https://nvd.nist.gov/vuln/detail/BDSA-2022-0856)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-379","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3887 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"# BDSA-2021-3887 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3887](https://nvd.nist.gov/vuln/detail/BDSA-2021-3887)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot Developer Tools 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# CVE-2022-22965 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)\n\n### BDSA: [C] [BDSA-2022-0858](https://nvd.nist.gov/vuln/detail/BDSA-2022-0858)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-749","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3731 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot Developer Tools 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# BDSA-2021-3731 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n\n\n### BDSA: [C] [BDSA-2021-3731](https://nvd.nist.gov/vuln/detail/BDSA-2021-3731)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot Developer Tools 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"# CVE-2023-20873 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)\n\n### BDSA: [H] [BDSA-2023-0953](https://nvd.nist.gov/vuln/detail/BDSA-2023-0953)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-284","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3817 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot Developer Tools 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"# BDSA-2021-3817 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3817](https://nvd.nist.gov/vuln/detail/BDSA-2021-3817)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-835","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot Developer Tools 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"# CVE-2023-20883 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)\n\n### BDSA: [M] [BDSA-2023-1225](https://nvd.nist.gov/vuln/detail/BDSA-2023-1225)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-345","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3887 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot Developer Tools 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"# BDSA-2021-3887 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3887](https://nvd.nist.gov/vuln/detail/BDSA-2021-3887)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Boot 2.2.2.RELEASE thru Spring Boot Developer Tools 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"# CVE-2022-27772 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)\n\n### BDSA: [M] [BDSA-2022-0856](https://nvd.nist.gov/vuln/detail/BDSA-2022-0856)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-379","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[D] Dependency: Spring Boot 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# BDSA-2021-3731 Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n\n\n### BDSA: [C] [BDSA-2021-3731](https://nvd.nist.gov/vuln/detail/BDSA-2021-3731)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[D] Dependency: Spring Boot 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# CVE-2022-22965 Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)\n\n### BDSA: [C] [BDSA-2022-0858](https://nvd.nist.gov/vuln/detail/BDSA-2022-0858)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-749","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[D] Dependency: Spring Boot 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"# CVE-2023-20873 Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)\n\n### BDSA: [H] [BDSA-2023-0953](https://nvd.nist.gov/vuln/detail/BDSA-2023-0953)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-284","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-27772 Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[D] Dependency: Spring Boot 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"# CVE-2022-27772 Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)\n\n### BDSA: [M] [BDSA-2022-0856](https://nvd.nist.gov/vuln/detail/BDSA-2022-0856)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-379","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3887 Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[D] Dependency: Spring Boot 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"# BDSA-2021-3887 Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3887](https://nvd.nist.gov/vuln/detail/BDSA-2021-3887)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[D] Dependency: Spring Boot 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"# BDSA-2021-3817 Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3817](https://nvd.nist.gov/vuln/detail/BDSA-2021-3817)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-835","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[D] Dependency: Spring Boot 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"# CVE-2023-20883 Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)\n\n### BDSA: [M] [BDSA-2023-1225](https://nvd.nist.gov/vuln/detail/BDSA-2023-1225)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-345","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-0856 Spring Boot Developer Tools 2.2.2.RELEASE","shortDescription":{"text":"[D] Dependency: Spring Boot Developer Tools 2.2.2.RELEASE (BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"# BDSA-2022-0856 Spring Boot Developer Tools 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2022-0856](https://nvd.nist.gov/vuln/detail/BDSA-2022-0856)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-379","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)\n\n### BDSA: [C] [BDSA-2022-0858](https://nvd.nist.gov/vuln/detail/BDSA-2022-0858)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-749","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"# BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-0847](https://nvd.nist.gov/vuln/detail/BDSA-2022-0847)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"# CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)\n\n### BDSA: [H] [BDSA-2020-0070](https://nvd.nist.gov/vuln/detail/BDSA-2020-0070)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-352","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"# CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)\n\n### BDSA: [H] [BDSA-2020-0069](https://nvd.nist.gov/vuln/detail/BDSA-2020-0069)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"# CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)\n\n### BDSA: [M] [BDSA-2021-3236](https://nvd.nist.gov/vuln/detail/BDSA-2021-3236)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-74","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"# CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)\n\n### BDSA: [M] [BDSA-2022-0011](https://nvd.nist.gov/vuln/detail/BDSA-2022-0011)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-74","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"# CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)\n\n### BDSA: [M] [BDSA-2022-0820](https://nvd.nist.gov/vuln/detail/BDSA-2022-0820)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-770","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"# CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)\n\n### BDSA: [M] [BDSA-2021-1588](https://nvd.nist.gov/vuln/detail/BDSA-2021-1588)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-264","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"# CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)\n\n### BDSA: [M] [BDSA-2020-2431](https://nvd.nist.gov/vuln/detail/BDSA-2020-2431)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"# CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)\n\n### BDSA: [M] [BDSA-2022-1329](https://nvd.nist.gov/vuln/detail/BDSA-2022-1329)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-684","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"# CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)\n\n### BDSA: [M] [BDSA-2022-1330](https://nvd.nist.gov/vuln/detail/BDSA-2022-1330)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-684","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"# CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)\n\n### BDSA: [M] [BDSA-2023-0638](https://nvd.nist.gov/vuln/detail/BDSA-2023-0638)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"# CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)\n\n### BDSA: [M] [BDSA-2023-0847](https://nvd.nist.gov/vuln/detail/BDSA-2023-0847)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Security 4.1.3 (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"# CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)\n\n### BDSA: [L] [BDSA-2022-1040](https://nvd.nist.gov/vuln/detail/BDSA-2022-1040)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)\n\n### BDSA: [C] [BDSA-2022-0858](https://nvd.nist.gov/vuln/detail/BDSA-2022-0858)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-749","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"# BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-0847](https://nvd.nist.gov/vuln/detail/BDSA-2022-0847)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"# CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)\n\n### BDSA: [H] [BDSA-2020-0070](https://nvd.nist.gov/vuln/detail/BDSA-2020-0070)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-352","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"# CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)\n\n### BDSA: [H] [BDSA-2020-0069](https://nvd.nist.gov/vuln/detail/BDSA-2020-0069)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"# CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)\n\n### BDSA: [M] [BDSA-2021-3236](https://nvd.nist.gov/vuln/detail/BDSA-2021-3236)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-74","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"# CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)\n\n### BDSA: [M] [BDSA-2022-0011](https://nvd.nist.gov/vuln/detail/BDSA-2022-0011)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-74","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"# CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)\n\n### BDSA: [M] [BDSA-2022-0820](https://nvd.nist.gov/vuln/detail/BDSA-2022-0820)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-770","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"# CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)\n\n### BDSA: [M] [BDSA-2021-1588](https://nvd.nist.gov/vuln/detail/BDSA-2021-1588)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-264","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"# CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)\n\n### BDSA: [M] [BDSA-2022-1329](https://nvd.nist.gov/vuln/detail/BDSA-2022-1329)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-684","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"# CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)\n\n### BDSA: [M] [BDSA-2022-1330](https://nvd.nist.gov/vuln/detail/BDSA-2022-1330)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-684","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"# CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)\n\n### BDSA: [M] [BDSA-2023-0638](https://nvd.nist.gov/vuln/detail/BDSA-2023-0638)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"# CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)\n\n### BDSA: [M] [BDSA-2023-0847](https://nvd.nist.gov/vuln/detail/BDSA-2023-0847)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"# CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)\n\n### BDSA: [M] [BDSA-2020-2431](https://nvd.nist.gov/vuln/detail/BDSA-2020-2431)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Framework 5.2.2.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"# CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)\n\n### BDSA: [L] [BDSA-2022-1040](https://nvd.nist.gov/vuln/detail/BDSA-2022-1040)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2022-3109 Spring Security 4.1.3","shortDescription":{"text":"[D] Dependency: Spring Security 4.1.3 (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"# BDSA-2022-3109 Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-3109](https://nvd.nist.gov/vuln/detail/BDSA-2022-3109)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-285","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2016-9879 Spring Security 4.1.3","shortDescription":{"text":"[D] Dependency: Spring Security 4.1.3 (CVE-2016-9879 BDSA-2016-1603)"},"fullDescription":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"help":{"markdown":"# CVE-2016-9879 Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2016-9879](https://nvd.nist.gov/vuln/detail/CVE-2016-9879)\n\n### BDSA: [H] [BDSA-2016-1603](https://nvd.nist.gov/vuln/detail/BDSA-2016-1603)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html\n\n","text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-22","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 Spring Security 4.1.3","shortDescription":{"text":"[D] Dependency: Spring Security 4.1.3 (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"# CVE-2022-22978 Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)\n\n### BDSA: [H] [BDSA-2022-1369](https://nvd.nist.gov/vuln/detail/BDSA-2022-1369)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-185","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22976 Spring Security 4.1.3","shortDescription":{"text":"[D] Dependency: Spring Security 4.1.3 (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"# CVE-2022-22976 Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)\n\n### BDSA: [M] [BDSA-2022-1370](https://nvd.nist.gov/vuln/detail/BDSA-2022-1370)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-190","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2019-11272 Spring Security 4.1.3","shortDescription":{"text":"[D] Dependency: Spring Security 4.1.3 (CVE-2019-11272 BDSA-2019-1853)"},"fullDescription":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"help":{"markdown":"# CVE-2019-11272 Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2019-11272](https://nvd.nist.gov/vuln/detail/CVE-2019-11272)\n\n### BDSA: [M] [BDSA-2019-1853](https://nvd.nist.gov/vuln/detail/BDSA-2019-1853)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-287","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-1199 Spring Security 4.1.3","shortDescription":{"text":"[D] Dependency: Spring Security 4.1.3 (CVE-2018-1199 BDSA-2018-0546)"},"fullDescription":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"help":{"markdown":"# CVE-2018-1199 Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2018-1199](https://nvd.nist.gov/vuln/detail/CVE-2018-1199)\n\n### BDSA: [M] [BDSA-2018-0546](https://nvd.nist.gov/vuln/detail/BDSA-2018-0546)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-153](https://cwe.mitre.org/data/definitions/153.html\n\n","text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-153","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-2310 Spring Security 4.1.3","shortDescription":{"text":"[D] Dependency: Spring Security 4.1.3 (BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"# BDSA-2021-2310 Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-2310](https://nvd.nist.gov/vuln/detail/BDSA-2021-2310)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 Spring Security 4.1.3","shortDescription":{"text":"[D] Dependency: Spring Security 4.1.3 (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"# CVE-2021-22112 Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)\n\n### BDSA: [M] [BDSA-2021-0417](https://nvd.nist.gov/vuln/detail/BDSA-2021-0417)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-265","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-3109 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Boot 2.2.2.RELEASE (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"# BDSA-2022-3109 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-3109](https://nvd.nist.gov/vuln/detail/BDSA-2022-3109)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-285","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2023-1825 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Boot 2.2.2.RELEASE (BDSA-2023-1825)"},"fullDescription":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"help":{"markdown":"# BDSA-2023-1825 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2023-1825](https://nvd.nist.gov/vuln/detail/BDSA-2023-1825)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-287","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Boot 2.2.2.RELEASE (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"# CVE-2022-22978 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)\n\n### BDSA: [H] [BDSA-2022-1369](https://nvd.nist.gov/vuln/detail/BDSA-2022-1369)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-185","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-22119 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Boot 2.2.2.RELEASE (CVE-2021-22119 BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"# CVE-2021-22119 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22119](https://nvd.nist.gov/vuln/detail/CVE-2021-22119)\n\n### BDSA: [M] [BDSA-2021-2310](https://nvd.nist.gov/vuln/detail/BDSA-2021-2310)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Boot 2.2.2.RELEASE (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"# CVE-2021-22112 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)\n\n### BDSA: [M] [BDSA-2021-0417](https://nvd.nist.gov/vuln/detail/BDSA-2021-0417)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-265","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5408 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Boot 2.2.2.RELEASE (CVE-2020-5408 BDSA-2020-1094)"},"fullDescription":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"help":{"markdown":"# CVE-2020-5408 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-5408](https://nvd.nist.gov/vuln/detail/CVE-2020-5408)\n\n### BDSA: [M] [BDSA-2020-1094](https://nvd.nist.gov/vuln/detail/BDSA-2020-1094)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-329](https://cwe.mitre.org/data/definitions/329.html\n\n","text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-329","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5407 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Boot 2.2.2.RELEASE (CVE-2020-5407 BDSA-2020-1092)"},"fullDescription":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"help":{"markdown":"# CVE-2020-5407 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-5407](https://nvd.nist.gov/vuln/detail/CVE-2020-5407)\n\n### BDSA: [M] [BDSA-2020-1092](https://nvd.nist.gov/vuln/detail/BDSA-2020-1092)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-287","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22976 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Boot 2.2.2.RELEASE (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"# CVE-2022-22976 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)\n\n### BDSA: [M] [BDSA-2022-1370](https://nvd.nist.gov/vuln/detail/BDSA-2022-1370)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-190","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Security 4.1.3 (BDSA-2023-1825)"},"fullDescription":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"help":{"markdown":"# BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2023-1825](https://nvd.nist.gov/vuln/detail/BDSA-2023-1825)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-287","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Security 4.1.3 (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"# BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-3109](https://nvd.nist.gov/vuln/detail/BDSA-2022-3109)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-285","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Security 4.1.3 (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"# CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)\n\n### BDSA: [H] [BDSA-2022-1369](https://nvd.nist.gov/vuln/detail/BDSA-2022-1369)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-185","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Security 4.1.3 (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"# CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)\n\n### BDSA: [M] [BDSA-2022-1370](https://nvd.nist.gov/vuln/detail/BDSA-2022-1370)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-190","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Security 4.1.3 (CVE-2021-22119 BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"# CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22119](https://nvd.nist.gov/vuln/detail/CVE-2021-22119)\n\n### BDSA: [M] [BDSA-2021-2310](https://nvd.nist.gov/vuln/detail/BDSA-2021-2310)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Security 4.1.3 (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"# CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)\n\n### BDSA: [M] [BDSA-2021-0417](https://nvd.nist.gov/vuln/detail/BDSA-2021-0417)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-265","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Security 4.1.3 (CVE-2020-5408 BDSA-2020-1094)"},"fullDescription":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"help":{"markdown":"# CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-5408](https://nvd.nist.gov/vuln/detail/CVE-2020-5408)\n\n### BDSA: [M] [BDSA-2020-1094](https://nvd.nist.gov/vuln/detail/BDSA-2020-1094)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-329](https://cwe.mitre.org/data/definitions/329.html\n\n","text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-329","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","shortDescription":{"text":"[T] Dependency: Spring Security 5.2.1 thru Spring Security 4.1.3 (CVE-2020-5407 BDSA-2020-1092)"},"fullDescription":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"help":{"markdown":"# CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-5407](https://nvd.nist.gov/vuln/detail/CVE-2020-5407)\n\n### BDSA: [M] [BDSA-2020-1092](https://nvd.nist.gov/vuln/detail/BDSA-2020-1092)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-287","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2023-1825 Spring Security 5.2.1","shortDescription":{"text":"[D] Dependency: Spring Security 5.2.1 (BDSA-2023-1825)"},"fullDescription":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"help":{"markdown":"# BDSA-2023-1825 Spring Security 5.2.1\n## Upgrade Guidance\n\n**Short Term** - 5.8.7\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2023-1825](https://nvd.nist.gov/vuln/detail/BDSA-2023-1825)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-287","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-3109 Spring Security 5.2.1","shortDescription":{"text":"[D] Dependency: Spring Security 5.2.1 (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"# BDSA-2022-3109 Spring Security 5.2.1\n## Upgrade Guidance\n\n**Short Term** - 5.8.7\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-3109](https://nvd.nist.gov/vuln/detail/BDSA-2022-3109)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-285","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 Spring Security 5.2.1","shortDescription":{"text":"[D] Dependency: Spring Security 5.2.1 (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"# CVE-2022-22978 Spring Security 5.2.1\n## Upgrade Guidance\n\n**Short Term** - 5.8.7\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)\n\n### BDSA: [H] [BDSA-2022-1369](https://nvd.nist.gov/vuln/detail/BDSA-2022-1369)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-185","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22976 Spring Security 5.2.1","shortDescription":{"text":"[D] Dependency: Spring Security 5.2.1 (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"# CVE-2022-22976 Spring Security 5.2.1\n## Upgrade Guidance\n\n**Short Term** - 5.8.7\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)\n\n### BDSA: [M] [BDSA-2022-1370](https://nvd.nist.gov/vuln/detail/BDSA-2022-1370)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-190","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22119 Spring Security 5.2.1","shortDescription":{"text":"[D] Dependency: Spring Security 5.2.1 (CVE-2021-22119 BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"# CVE-2021-22119 Spring Security 5.2.1\n## Upgrade Guidance\n\n**Short Term** - 5.8.7\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22119](https://nvd.nist.gov/vuln/detail/CVE-2021-22119)\n\n### BDSA: [M] [BDSA-2021-2310](https://nvd.nist.gov/vuln/detail/BDSA-2021-2310)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 Spring Security 5.2.1","shortDescription":{"text":"[D] Dependency: Spring Security 5.2.1 (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"# CVE-2021-22112 Spring Security 5.2.1\n## Upgrade Guidance\n\n**Short Term** - 5.8.7\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)\n\n### BDSA: [M] [BDSA-2021-0417](https://nvd.nist.gov/vuln/detail/BDSA-2021-0417)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-265","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5408 Spring Security 5.2.1","shortDescription":{"text":"[D] Dependency: Spring Security 5.2.1 (CVE-2020-5408 BDSA-2020-1094)"},"fullDescription":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"help":{"markdown":"# CVE-2020-5408 Spring Security 5.2.1\n## Upgrade Guidance\n\n**Short Term** - 5.8.7\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-5408](https://nvd.nist.gov/vuln/detail/CVE-2020-5408)\n\n### BDSA: [M] [BDSA-2020-1094](https://nvd.nist.gov/vuln/detail/BDSA-2020-1094)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-329](https://cwe.mitre.org/data/definitions/329.html\n\n","text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-329","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5407 Spring Security 5.2.1","shortDescription":{"text":"[D] Dependency: Spring Security 5.2.1 (CVE-2020-5407 BDSA-2020-1092)"},"fullDescription":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"help":{"markdown":"# CVE-2020-5407 Spring Security 5.2.1\n## Upgrade Guidance\n\n**Short Term** - 5.8.7\n\n**Long Term** - 6.1.4\n\n## Description\nSpring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-5407](https://nvd.nist.gov/vuln/detail/CVE-2020-5407)\n\n### BDSA: [M] [BDSA-2020-1092](https://nvd.nist.gov/vuln/detail/BDSA-2020-1092)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-287","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-9116 WireMock 2.8.0","shortDescription":{"text":"[D] Dependency: WireMock 2.8.0 (CVE-2018-9116 BDSA-2018-0914)"},"fullDescription":{"text":"Wiremock is vulnerable to XML external entity (XXE) attacks due to weak configuration of XML parsing. An attacker can retrieve files outside the web root, execute arbitrary code or cause a denial-of-service (DoS) condition."},"help":{"markdown":"# CVE-2018-9116 WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nWiremock is vulnerable to XML external entity (XXE) attacks due to weak configuration of XML parsing. An attacker can retrieve files outside the web root, execute arbitrary code or cause a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2018-9116](https://nvd.nist.gov/vuln/detail/CVE-2018-9116)\n\n### BDSA: [H] [BDSA-2018-0914](https://nvd.nist.gov/vuln/detail/BDSA-2018-0914)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html\n\n","text":"Wiremock is vulnerable to XML external entity (XXE) attacks due to weak configuration of XML parsing. An attacker can retrieve files outside the web root, execute arbitrary code or cause a denial-of-service (DoS) condition."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-611","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-41327 WireMock 2.8.0","shortDescription":{"text":"[D] Dependency: WireMock 2.8.0 (CVE-2023-41327 BDSA-2023-2379)"},"fullDescription":{"text":"WireMock is vulnerable to a server-side request forgery (SSRF) due to improper restrictive configuration of the DNS resolver within the processing of webhooks. Successful exploitation of this issue could allow an unauthenticated attacker to trick a user into initiating a POST request via an arbitrary webhook to an outbound network, in order to obtain access to internal resources."},"help":{"markdown":"# CVE-2023-41327 WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nWireMock is vulnerable to a server-side request forgery (SSRF) due to improper restrictive configuration of the DNS resolver within the processing of webhooks. Successful exploitation of this issue could allow an unauthenticated attacker to trick a user into initiating a POST request via an arbitrary webhook to an outbound network, in order to obtain access to internal resources.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-41327](https://nvd.nist.gov/vuln/detail/CVE-2023-41327)\n\n### BDSA: [M] [BDSA-2023-2379](https://nvd.nist.gov/vuln/detail/BDSA-2023-2379)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html\n\n","text":"WireMock is vulnerable to a server-side request forgery (SSRF) due to improper restrictive configuration of the DNS resolver within the processing of webhooks. Successful exploitation of this issue could allow an unauthenticated attacker to trick a user into initiating a POST request via an arbitrary webhook to an outbound network, in order to obtain access to internal resources."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-918","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-9117 WireMock 2.8.0","shortDescription":{"text":"[D] Dependency: WireMock 2.8.0 (CVE-2018-9117 BDSA-2018-0930)"},"fullDescription":{"text":"WireMock contains an absolute path traversal vulnerability where an attacker is able to access local files and potentially disclose sensitive information."},"help":{"markdown":"# CVE-2018-9117 WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nWireMock contains an absolute path traversal vulnerability where an attacker is able to access local files and potentially disclose sensitive information.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2018-9117](https://nvd.nist.gov/vuln/detail/CVE-2018-9117)\n\n### BDSA: [M] [BDSA-2018-0930](https://nvd.nist.gov/vuln/detail/BDSA-2018-0930)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html\n\n","text":"WireMock contains an absolute path traversal vulnerability where an attacker is able to access local files and potentially disclose sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-36","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-41329 WireMock 2.8.0","shortDescription":{"text":"[D] Dependency: WireMock 2.8.0 (CVE-2023-41329 BDSA-2023-2375)"},"fullDescription":{"text":"WireMock contains a domain restriction bypass vulnerability due to insufficient validation of allowed address rules. Successful exploitation of this issue enables a highly privileged attacker that has control over a DNS service to bypass domain restriction and gain unauthorized access."},"help":{"markdown":"# CVE-2023-41329 WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nWireMock contains a domain restriction bypass vulnerability due to insufficient validation of allowed address rules. Successful exploitation of this issue enables a highly privileged attacker that has control over a DNS service to bypass domain restriction and gain unauthorized access.\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2023-41329](https://nvd.nist.gov/vuln/detail/CVE-2023-41329)\n\n### BDSA: [L] [BDSA-2023-2375](https://nvd.nist.gov/vuln/detail/BDSA-2023-2375)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-350](https://cwe.mitre.org/data/definitions/350.html\n\n","text":"WireMock contains a domain restriction bypass vulnerability due to insufficient validation of allowed address rules. Successful exploitation of this issue enables a highly privileged attacker that has control over a DNS service to bypass domain restriction and gain unauthorized access."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-350","patch_available"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-39147 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39147 BDSA-2021-2602)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"# CVE-2021-39147 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2021-39147](https://nvd.nist.gov/vuln/detail/CVE-2021-39147)\n\n### BDSA: [C] [BDSA-2021-2602](https://nvd.nist.gov/vuln/detail/BDSA-2021-2602)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2013-7285 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2013-7285 BDSA-2013-0046)"},"fullDescription":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"help":{"markdown":"# CVE-2013-7285 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2013-7285](https://nvd.nist.gov/vuln/detail/CVE-2013-7285)\n\n### BDSA: [C] [BDSA-2013-0046](https://nvd.nist.gov/vuln/detail/BDSA-2013-0046)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39139 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39139 BDSA-2021-2581)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"# CVE-2021-39139 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2021-39139](https://nvd.nist.gov/vuln/detail/CVE-2021-39139)\n\n### BDSA: [C] [BDSA-2021-2581](https://nvd.nist.gov/vuln/detail/BDSA-2021-2581)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-184","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39148 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39148 BDSA-2021-2603)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"# CVE-2021-39148 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2021-39148](https://nvd.nist.gov/vuln/detail/CVE-2021-39148)\n\n### BDSA: [C] [BDSA-2021-2603](https://nvd.nist.gov/vuln/detail/BDSA-2021-2603)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-26217 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2020-26217 BDSA-2020-3372)"},"fullDescription":{"text":"Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."},"help":{"markdown":"# CVE-2020-26217 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2020-26217](https://nvd.nist.gov/vuln/detail/CVE-2020-26217)\n\n### BDSA: [C] [BDSA-2020-3372](https://nvd.nist.gov/vuln/detail/BDSA-2020-3372)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-184","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39141 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39141 BDSA-2021-2580)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"# CVE-2021-39141 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2021-39141](https://nvd.nist.gov/vuln/detail/CVE-2021-39141)\n\n### BDSA: [C] [BDSA-2021-2580](https://nvd.nist.gov/vuln/detail/BDSA-2021-2580)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-184","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39154 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39154 BDSA-2021-2573)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"# CVE-2021-39154 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2021-39154](https://nvd.nist.gov/vuln/detail/CVE-2021-39154)\n\n### BDSA: [C] [BDSA-2021-2573](https://nvd.nist.gov/vuln/detail/BDSA-2021-2573)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-184","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39144 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39144 BDSA-2021-2569)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# CVE-2021-39144 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2021-39144](https://nvd.nist.gov/vuln/detail/CVE-2021-39144)\n\n### BDSA: [C] [BDSA-2021-2569](https://nvd.nist.gov/vuln/detail/BDSA-2021-2569)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-184","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39145 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39145 BDSA-2021-2590)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"# CVE-2021-39145 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2021-39145](https://nvd.nist.gov/vuln/detail/CVE-2021-39145)\n\n### BDSA: [C] [BDSA-2021-2590](https://nvd.nist.gov/vuln/detail/BDSA-2021-2590)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39146 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39146 BDSA-2021-2593)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"# CVE-2021-39146 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2021-39146](https://nvd.nist.gov/vuln/detail/CVE-2021-39146)\n\n### BDSA: [C] [BDSA-2021-2593](https://nvd.nist.gov/vuln/detail/BDSA-2021-2593)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39150 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39150 BDSA-2021-2586)"},"fullDescription":{"text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"# CVE-2021-39150 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-39150](https://nvd.nist.gov/vuln/detail/CVE-2021-39150)\n\n### BDSA: [H] [BDSA-2021-2586](https://nvd.nist.gov/vuln/detail/BDSA-2021-2586)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html\n\n","text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-918","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21344 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21344 BDSA-2021-0730)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"help":{"markdown":"# CVE-2021-21344 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-21344](https://nvd.nist.gov/vuln/detail/CVE-2021-21344)\n\n### BDSA: [H] [BDSA-2021-0730](https://nvd.nist.gov/vuln/detail/BDSA-2021-0730)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21349 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21349 BDSA-2021-0731)"},"fullDescription":{"text":"XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."},"help":{"markdown":"# CVE-2021-21349 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-21349](https://nvd.nist.gov/vuln/detail/CVE-2021-21349)\n\n### BDSA: [H] [BDSA-2021-0731](https://nvd.nist.gov/vuln/detail/BDSA-2021-0731)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html\n\n","text":"XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-918","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21345 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21345 BDSA-2021-0728)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."},"help":{"markdown":"# CVE-2021-21345 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-21345](https://nvd.nist.gov/vuln/detail/CVE-2021-21345)\n\n### BDSA: [H] [BDSA-2021-0728](https://nvd.nist.gov/vuln/detail/BDSA-2021-0728)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-77](https://cwe.mitre.org/data/definitions/77.html\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-77","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21346 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21346 BDSA-2021-0726)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"help":{"markdown":"# CVE-2021-21346 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-21346](https://nvd.nist.gov/vuln/detail/CVE-2021-21346)\n\n### BDSA: [H] [BDSA-2021-0726](https://nvd.nist.gov/vuln/detail/BDSA-2021-0726)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21342 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21342 BDSA-2021-0736)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."},"help":{"markdown":"# CVE-2021-21342 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-21342](https://nvd.nist.gov/vuln/detail/CVE-2021-21342)\n\n### BDSA: [H] [BDSA-2021-0736](https://nvd.nist.gov/vuln/detail/BDSA-2021-0736)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-918","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21350 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21350 BDSA-2021-0724)"},"fullDescription":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"help":{"markdown":"# CVE-2021-21350 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-21350](https://nvd.nist.gov/vuln/detail/CVE-2021-21350)\n\n### BDSA: [H] [BDSA-2021-0724](https://nvd.nist.gov/vuln/detail/BDSA-2021-0724)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-29505 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-29505 BDSA-2021-1626)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"help":{"markdown":"# CVE-2021-29505 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-29505](https://nvd.nist.gov/vuln/detail/CVE-2021-29505)\n\n### BDSA: [H] [BDSA-2021-1626](https://nvd.nist.gov/vuln/detail/BDSA-2021-1626)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39149 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39149 BDSA-2021-2565)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"# CVE-2021-39149 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-39149](https://nvd.nist.gov/vuln/detail/CVE-2021-39149)\n\n### BDSA: [H] [BDSA-2021-2565](https://nvd.nist.gov/vuln/detail/BDSA-2021-2565)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39151 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39151 BDSA-2021-2568)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"# CVE-2021-39151 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-39151](https://nvd.nist.gov/vuln/detail/CVE-2021-39151)\n\n### BDSA: [H] [BDSA-2021-2568](https://nvd.nist.gov/vuln/detail/BDSA-2021-2568)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21351 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21351 BDSA-2021-0721)"},"fullDescription":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"help":{"markdown":"# CVE-2021-21351 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-21351](https://nvd.nist.gov/vuln/detail/CVE-2021-21351)\n\n### BDSA: [H] [BDSA-2021-0721](https://nvd.nist.gov/vuln/detail/BDSA-2021-0721)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-184","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-26258 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2020-26258 BDSA-2020-3787)"},"fullDescription":{"text":"Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."},"help":{"markdown":"# CVE-2020-26258 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-26258](https://nvd.nist.gov/vuln/detail/CVE-2020-26258)\n\n### BDSA: [H] [BDSA-2020-3787](https://nvd.nist.gov/vuln/detail/BDSA-2020-3787)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html\n\n","text":"Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-918","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39153 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39153 BDSA-2021-2576)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."},"help":{"markdown":"# CVE-2021-39153 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-39153](https://nvd.nist.gov/vuln/detail/CVE-2021-39153)\n\n### BDSA: [H] [BDSA-2021-2576](https://nvd.nist.gov/vuln/detail/BDSA-2021-2576)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-26259 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2020-26259 BDSA-2020-3780)"},"fullDescription":{"text":"XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."},"help":{"markdown":"# CVE-2020-26259 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-26259](https://nvd.nist.gov/vuln/detail/CVE-2020-26259)\n\n### BDSA: [H] [BDSA-2020-3780](https://nvd.nist.gov/vuln/detail/BDSA-2020-3780)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-184","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2016-3674 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2016-3674 BDSA-2016-0027)"},"fullDescription":{"text":"XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."},"help":{"markdown":"# CVE-2016-3674 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2016-3674](https://nvd.nist.gov/vuln/detail/CVE-2016-3674)\n\n### BDSA: [H] [BDSA-2016-0027](https://nvd.nist.gov/vuln/detail/BDSA-2016-0027)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html\n\n","text":"XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-611","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39152 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39152 BDSA-2021-2587)"},"fullDescription":{"text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"# CVE-2021-39152 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-39152](https://nvd.nist.gov/vuln/detail/CVE-2021-39152)\n\n### BDSA: [H] [BDSA-2021-2587](https://nvd.nist.gov/vuln/detail/BDSA-2021-2587)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html\n\n","text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-918","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21347 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21347 BDSA-2021-0722)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"help":{"markdown":"# CVE-2021-21347 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-21347](https://nvd.nist.gov/vuln/detail/CVE-2021-21347)\n\n### BDSA: [H] [BDSA-2021-0722](https://nvd.nist.gov/vuln/detail/BDSA-2021-0722)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39140 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-39140 BDSA-2021-2582)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"# CVE-2021-39140 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-39140](https://nvd.nist.gov/vuln/detail/CVE-2021-39140)\n\n### BDSA: [M] [BDSA-2021-2582](https://nvd.nist.gov/vuln/detail/BDSA-2021-2582)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-184","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-21341 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21341 BDSA-2021-0737)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."},"help":{"markdown":"# CVE-2021-21341 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-21341](https://nvd.nist.gov/vuln/detail/CVE-2021-21341)\n\n### BDSA: [M] [BDSA-2021-0737](https://nvd.nist.gov/vuln/detail/BDSA-2021-0737)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-835","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-21348 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21348 BDSA-2021-0735)"},"fullDescription":{"text":"Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."},"help":{"markdown":"# CVE-2021-21348 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-21348](https://nvd.nist.gov/vuln/detail/CVE-2021-21348)\n\n### BDSA: [M] [BDSA-2021-0735](https://nvd.nist.gov/vuln/detail/BDSA-2021-0735)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-21343 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-21343 BDSA-2021-0732)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."},"help":{"markdown":"# CVE-2021-21343 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-21343](https://nvd.nist.gov/vuln/detail/CVE-2021-21343)\n\n### BDSA: [M] [BDSA-2021-0732](https://nvd.nist.gov/vuln/detail/BDSA-2021-0732)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2017-7957 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2017-7957 BDSA-2017-0661)"},"fullDescription":{"text":"A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."},"help":{"markdown":"# CVE-2017-7957 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nA flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2017-7957](https://nvd.nist.gov/vuln/detail/CVE-2017-7957)\n\n### BDSA: [M] [BDSA-2017-0661](https://nvd.nist.gov/vuln/detail/BDSA-2017-0661)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-43859 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2021-43859 BDSA-2022-0291)"},"fullDescription":{"text":"XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."},"help":{"markdown":"# CVE-2021-43859 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-43859](https://nvd.nist.gov/vuln/detail/CVE-2021-43859)\n\n### BDSA: [M] [BDSA-2022-0291](https://nvd.nist.gov/vuln/detail/BDSA-2022-0291)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-40151 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2022-40151 BDSA-2022-2580)"},"fullDescription":{"text":"XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."},"help":{"markdown":"# CVE-2022-40151 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-40151](https://nvd.nist.gov/vuln/detail/CVE-2022-40151)\n\n### BDSA: [M] [BDSA-2022-2580](https://nvd.nist.gov/vuln/detail/BDSA-2022-2580)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html\n\n","text":"XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-121","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-41966 XStream 1.4.5","shortDescription":{"text":"[D] Dependency: XStream 1.4.5 (CVE-2022-41966 BDSA-2022-3693)"},"fullDescription":{"text":"XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."},"help":{"markdown":"# CVE-2022-41966 XStream 1.4.5\n## Upgrade Guidance\n\n**Short Term** - 1.4.20\n\n**Long Term** - 1.4.20\n\n## Description\nXStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-41966](https://nvd.nist.gov/vuln/detail/CVE-2022-41966)\n\n### BDSA: [M] [BDSA-2022-3693](https://nvd.nist.gov/vuln/detail/BDSA-2022-3693)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-502","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-10683 dom4j: flexible XML framework for Java 2.1.1: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: dom4j: flexible XML framework for Java 2.1.1 thru Spring Boot 2.2.2.RELEASE (CVE-2020-10683 BDSA-2019-4386)"},"fullDescription":{"text":"Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."},"help":{"markdown":"# CVE-2020-10683 dom4j: flexible XML framework for Java 2.1.1: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nDom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-10683](https://nvd.nist.gov/vuln/detail/CVE-2020-10683)\n\n### BDSA: [H] [BDSA-2019-4386](https://nvd.nist.gov/vuln/detail/BDSA-2019-4386)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html\n\n","text":"Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-611","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2018-10237 google-guava 18.0","shortDescription":{"text":"[D] Dependency: google-guava 18.0 (CVE-2018-10237 BDSA-2018-1358)"},"fullDescription":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"help":{"markdown":"# CVE-2018-10237 google-guava 18.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - 32.1.3-jre\n\n## Description\nServers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2018-10237](https://nvd.nist.gov/vuln/detail/CVE-2018-10237)\n\n### BDSA: [M] [BDSA-2018-1358](https://nvd.nist.gov/vuln/detail/BDSA-2018-1358)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-2976 google-guava 18.0","shortDescription":{"text":"[D] Dependency: google-guava 18.0 (CVE-2023-2976 BDSA-2016-1748)"},"fullDescription":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"help":{"markdown":"# CVE-2023-2976 google-guava 18.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - 32.1.3-jre\n\n## Description\nGuava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-2976](https://nvd.nist.gov/vuln/detail/CVE-2023-2976)\n\n### BDSA: [M] [BDSA-2016-1748](https://nvd.nist.gov/vuln/detail/BDSA-2016-1748)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-378](https://cwe.mitre.org/data/definitions/378.html\n\n","text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-378","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-8908 google-guava 18.0","shortDescription":{"text":"[D] Dependency: google-guava 18.0 (CVE-2020-8908 BDSA-2020-3736)"},"fullDescription":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"help":{"markdown":"# CVE-2020-8908 google-guava 18.0\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - 32.1.3-jre\n\n## Description\nGuava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-8908](https://nvd.nist.gov/vuln/detail/CVE-2020-8908)\n\n### BDSA: [M] [BDSA-2020-3736](https://nvd.nist.gov/vuln/detail/BDSA-2020-3736)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html\n\n","text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-379","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-10237 google-guava 20.0: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: google-guava 20.0 thru WireMock 2.8.0 (CVE-2018-10237 BDSA-2018-1358)"},"fullDescription":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"help":{"markdown":"# CVE-2018-10237 google-guava 20.0: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nServers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2018-10237](https://nvd.nist.gov/vuln/detail/CVE-2018-10237)\n\n### BDSA: [M] [BDSA-2018-1358](https://nvd.nist.gov/vuln/detail/BDSA-2018-1358)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-2976 google-guava 20.0: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: google-guava 20.0 thru WireMock 2.8.0 (CVE-2023-2976 BDSA-2016-1748)"},"fullDescription":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"help":{"markdown":"# CVE-2023-2976 google-guava 20.0: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nGuava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-2976](https://nvd.nist.gov/vuln/detail/CVE-2023-2976)\n\n### BDSA: [M] [BDSA-2016-1748](https://nvd.nist.gov/vuln/detail/BDSA-2016-1748)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-378](https://cwe.mitre.org/data/definitions/378.html\n\n","text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-378","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-8908 google-guava 20.0: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: google-guava 20.0 thru WireMock 2.8.0 (CVE-2020-8908 BDSA-2020-3736)"},"fullDescription":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"help":{"markdown":"# CVE-2020-8908 google-guava 20.0: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nGuava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-8908](https://nvd.nist.gov/vuln/detail/CVE-2020-8908)\n\n### BDSA: [M] [BDSA-2020-3736](https://nvd.nist.gov/vuln/detail/BDSA-2020-3736)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html\n\n","text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-379","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-23064 jQuery 3.2.1","shortDescription":{"text":"[D] Dependency: jQuery 3.2.1 (CVE-2020-23064 BDSA-2020-4841)"},"fullDescription":{"text":"jQuery is vulnerable to cross-site scripting (XSS) due to a flaw present in Document Object Model (DOM) manipulation methods.\n\nAn attacker could craft HTML content that when viewed by a victim user could allow for the execution of arbitrary scripts. Such scripts could be used to steal tokens or tamper with the rendering of the web content.\n\n**Note**: This reported issue appears to be a duplicate of **CVE-2020-11023** (**BDSA-2020-0964**)."},"help":{"markdown":"# CVE-2020-23064 jQuery 3.2.1\n## Upgrade Guidance\n\n**Short Term** - 3.7.1\n\n**Long Term** - 3.7.1\n\n## Description\njQuery is vulnerable to cross-site scripting (XSS) due to a flaw present in Document Object Model (DOM) manipulation methods.\n\nAn attacker could craft HTML content that when viewed by a victim user could allow for the execution of arbitrary scripts. Such scripts could be used to steal tokens or tamper with the rendering of the web content.\n\n**Note**: This reported issue appears to be a duplicate of **CVE-2020-11023** (**BDSA-2020-0964**).\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-23064](https://nvd.nist.gov/vuln/detail/CVE-2020-23064)\n\n### BDSA: [H] [BDSA-2020-4841](https://nvd.nist.gov/vuln/detail/BDSA-2020-4841)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html\n\n","text":"jQuery is vulnerable to cross-site scripting (XSS) due to a flaw present in Document Object Model (DOM) manipulation methods.\n\nAn attacker could craft HTML content that when viewed by a victim user could allow for the execution of arbitrary scripts. Such scripts could be used to steal tokens or tamper with the rendering of the web content.\n\n**Note**: This reported issue appears to be a duplicate of **CVE-2020-11023** (**BDSA-2020-0964**)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-80","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-11023 jQuery 3.2.1","shortDescription":{"text":"[D] Dependency: jQuery 3.2.1 (CVE-2020-11023 BDSA-2020-0964)"},"fullDescription":{"text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if certain HTML is passed to Document Object Model (DOM) manipulation methods. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"help":{"markdown":"# CVE-2020-11023 jQuery 3.2.1\n## Upgrade Guidance\n\n**Short Term** - 3.7.1\n\n**Long Term** - 3.7.1\n\n## Description\nIt was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if certain HTML is passed to Document Object Model (DOM) manipulation methods. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-11023](https://nvd.nist.gov/vuln/detail/CVE-2020-11023)\n\n### BDSA: [H] [BDSA-2020-0964](https://nvd.nist.gov/vuln/detail/BDSA-2020-0964)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html\n\n","text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if certain HTML is passed to Document Object Model (DOM) manipulation methods. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-80","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-11022 jQuery 3.2.1","shortDescription":{"text":"[D] Dependency: jQuery 3.2.1 (CVE-2020-11022 BDSA-2020-0686)"},"fullDescription":{"text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if `jQuery.htmlPrefilter` method is used. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target's browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"help":{"markdown":"# CVE-2020-11022 jQuery 3.2.1\n## Upgrade Guidance\n\n**Short Term** - 3.7.1\n\n**Long Term** - 3.7.1\n\n## Description\nIt was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if `jQuery.htmlPrefilter` method is used. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target's browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-11022](https://nvd.nist.gov/vuln/detail/CVE-2020-11022)\n\n### BDSA: [H] [BDSA-2020-0686](https://nvd.nist.gov/vuln/detail/BDSA-2020-0686)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html\n\n","text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if `jQuery.htmlPrefilter` method is used. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target's browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-80","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2019-11358 jQuery 3.2.1","shortDescription":{"text":"[D] Dependency: jQuery 3.2.1 (CVE-2019-11358 BDSA-2019-1138)"},"fullDescription":{"text":"An improper input validation vulnerability has been discovered in JQuery. An attacker could exploit this vulnerability to execute cross-site scripting (XSS) attacks, trigger a denial-of-service (DoS) condition, or gain unauthorized access to the application."},"help":{"markdown":"# CVE-2019-11358 jQuery 3.2.1\n## Upgrade Guidance\n\n**Short Term** - 3.7.1\n\n**Long Term** - 3.7.1\n\n## Description\nAn improper input validation vulnerability has been discovered in JQuery. An attacker could exploit this vulnerability to execute cross-site scripting (XSS) attacks, trigger a denial-of-service (DoS) condition, or gain unauthorized access to the application.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2019-11358](https://nvd.nist.gov/vuln/detail/CVE-2019-11358)\n\n### BDSA: [H] [BDSA-2019-1138](https://nvd.nist.gov/vuln/detail/BDSA-2019-1138)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"An improper input validation vulnerability has been discovered in JQuery. An attacker could exploit this vulnerability to execute cross-site scripting (XSS) attacks, trigger a denial-of-service (DoS) condition, or gain unauthorized access to the application."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3651 jQuery 3.2.1","shortDescription":{"text":"[D] Dependency: jQuery 3.2.1 (BDSA-2021-3651)"},"fullDescription":{"text":"jQuery contains commented references to the hijacked domain `blindsignals`, within the files `src/queue/delay.js` and `test/data/jquery-1.9.1.js` (the former referring to a Web Archive version of the original site). Users without awareness of the domain's status could be exposed to unspecified attacks if they attempt to follow the links to the hijacked site."},"help":{"markdown":"# BDSA-2021-3651 jQuery 3.2.1\n## Upgrade Guidance\n\n**Short Term** - 3.7.1\n\n**Long Term** - 3.7.1\n\n## Description\njQuery contains commented references to the hijacked domain `blindsignals`, within the files `src/queue/delay.js` and `test/data/jquery-1.9.1.js` (the former referring to a Web Archive version of the original site). Users without awareness of the domain's status could be exposed to unspecified attacks if they attempt to follow the links to the hijacked site.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3651](https://nvd.nist.gov/vuln/detail/BDSA-2021-3651)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-546](https://cwe.mitre.org/data/definitions/546.html\n\n","text":"jQuery contains commented references to the hijacked domain `blindsignals`, within the files `src/queue/delay.js` and `test/data/jquery-1.9.1.js` (the former referring to a Web Archive version of the original site). Users without awareness of the domain's status could be exposed to unspecified attacks if they attempt to follow the links to the hijacked site."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-546","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-25649 jackson-databind 2.10.1: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: jackson-databind 2.10.1 thru WireMock 2.8.0 (CVE-2020-25649 BDSA-2020-2965)"},"fullDescription":{"text":"Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application."},"help":{"markdown":"# CVE-2020-25649 jackson-databind 2.10.1: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nJackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-25649](https://nvd.nist.gov/vuln/detail/CVE-2020-25649)\n\n### BDSA: [H] [BDSA-2020-2965](https://nvd.nist.gov/vuln/detail/BDSA-2020-2965)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html\n\n","text":"Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-611","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-36518 jackson-databind 2.10.1: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: jackson-databind 2.10.1 thru WireMock 2.8.0 (CVE-2020-36518 BDSA-2020-4752)"},"fullDescription":{"text":"jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."},"help":{"markdown":"# CVE-2020-36518 jackson-databind 2.10.1: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\njackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-36518](https://nvd.nist.gov/vuln/detail/CVE-2020-36518)\n\n### BDSA: [M] [BDSA-2020-4752](https://nvd.nist.gov/vuln/detail/BDSA-2020-4752)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-46877 jackson-databind 2.10.1: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: jackson-databind 2.10.1 thru WireMock 2.8.0 (CVE-2021-46877 BDSA-2021-4830)"},"fullDescription":{"text":"jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."},"help":{"markdown":"# CVE-2021-46877 jackson-databind 2.10.1: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\njackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-46877](https://nvd.nist.gov/vuln/detail/CVE-2021-46877)\n\n### BDSA: [M] [BDSA-2021-4830](https://nvd.nist.gov/vuln/detail/BDSA-2021-4830)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html\n\n","text":"jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-770","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-42003 jackson-databind 2.10.1: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: jackson-databind 2.10.1 thru WireMock 2.8.0 (CVE-2022-42003 BDSA-2022-2765)"},"fullDescription":{"text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."},"help":{"markdown":"# CVE-2022-42003 jackson-databind 2.10.1: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nJackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-42003](https://nvd.nist.gov/vuln/detail/CVE-2022-42003)\n\n### BDSA: [M] [BDSA-2022-2765](https://nvd.nist.gov/vuln/detail/BDSA-2022-2765)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-42004 jackson-databind 2.10.1: WireMock 2.8.0","shortDescription":{"text":"[T] Dependency: jackson-databind 2.10.1 thru WireMock 2.8.0 (CVE-2022-42004 BDSA-2022-2768)"},"fullDescription":{"text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."},"help":{"markdown":"# CVE-2022-42004 jackson-databind 2.10.1: WireMock 2.8.0\n## Upgrade Guidance\n\n**Short Term** - 2.27.2\n\n**Long Term** - 3.0.1\n\n## Description\nJackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-42004](https://nvd.nist.gov/vuln/detail/CVE-2022-42004)\n\n### BDSA: [M] [BDSA-2022-2768](https://nvd.nist.gov/vuln/detail/BDSA-2022-2768)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-27568 json-smart 2.3: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: json-smart 2.3 thru Spring Boot 2.2.2.RELEASE (CVE-2021-27568 BDSA-2021-0939)"},"fullDescription":{"text":"A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."},"help":{"markdown":"# CVE-2021-27568 json-smart 2.3: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nA vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-27568](https://nvd.nist.gov/vuln/detail/CVE-2021-27568)\n\n### BDSA: [H] [BDSA-2021-0939](https://nvd.nist.gov/vuln/detail/BDSA-2021-0939)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-1370 json-smart 2.3: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: json-smart 2.3 thru Spring Boot 2.2.2.RELEASE (CVE-2023-1370 BDSA-2023-0616)"},"fullDescription":{"text":"json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."},"help":{"markdown":"# CVE-2023-1370 json-smart 2.3: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\njson-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-1370](https://nvd.nist.gov/vuln/detail/CVE-2023-1370)\n\n### BDSA: [M] [BDSA-2023-0616](https://nvd.nist.gov/vuln/detail/BDSA-2023-0616)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html\n\n","text":"json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-770","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-37714 jsoup 1.11.3","shortDescription":{"text":"[D] Dependency: jsoup 1.11.3 (CVE-2021-37714 BDSA-2021-2510)"},"fullDescription":{"text":"jsoup is vulnerable to denial-of-service (DoS) due to flaws in its parsing component. A remote attacker could impact the performance of the application, or cause it to crash, by sending maliciously crafted HTML or XML documents to a vulnerable endpoint."},"help":{"markdown":"# CVE-2021-37714 jsoup 1.11.3\n## Upgrade Guidance\n\n**Short Term** - 1.16.1\n\n**Long Term** - 1.16.1\n\n## Description\njsoup is vulnerable to denial-of-service (DoS) due to flaws in its parsing component. A remote attacker could impact the performance of the application, or cause it to crash, by sending maliciously crafted HTML or XML documents to a vulnerable endpoint.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-37714](https://nvd.nist.gov/vuln/detail/CVE-2021-37714)\n\n### BDSA: [M] [BDSA-2021-2510](https://nvd.nist.gov/vuln/detail/BDSA-2021-2510)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-229](https://cwe.mitre.org/data/definitions/229.html\n\n","text":"jsoup is vulnerable to denial-of-service (DoS) due to flaws in its parsing component. A remote attacker could impact the performance of the application, or cause it to crash, by sending maliciously crafted HTML or XML documents to a vulnerable endpoint."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-229","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-36033 jsoup 1.11.3","shortDescription":{"text":"[D] Dependency: jsoup 1.11.3 (CVE-2022-36033 BDSA-2022-2382)"},"fullDescription":{"text":"Jsoup has a cross-site scripting (XSS) vulnerability due to an absence of correct parameter input validation. A remote attacker could insert JavaScript code into dynamically generated content in order to steal a victim's session tokens, cookies, or other sensitive information.\n\n**Note** This vulnerability applies to installations where the non-default `SafeList.preserveRelativeLinks` option is enabled and the HTML site does not have a Content Security Policy is in place."},"help":{"markdown":"# CVE-2022-36033 jsoup 1.11.3\n## Upgrade Guidance\n\n**Short Term** - 1.16.1\n\n**Long Term** - 1.16.1\n\n## Description\nJsoup has a cross-site scripting (XSS) vulnerability due to an absence of correct parameter input validation. A remote attacker could insert JavaScript code into dynamically generated content in order to steal a victim's session tokens, cookies, or other sensitive information.\n\n**Note** This vulnerability applies to installations where the non-default `SafeList.preserveRelativeLinks` option is enabled and the HTML site does not have a Content Security Policy is in place.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-36033](https://nvd.nist.gov/vuln/detail/CVE-2022-36033)\n\n### BDSA: [M] [BDSA-2022-2382](https://nvd.nist.gov/vuln/detail/BDSA-2022-2382)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html\n\n","text":"Jsoup has a cross-site scripting (XSS) vulnerability due to an absence of correct parameter input validation. A remote attacker could insert JavaScript code into dynamically generated content in order to steal a victim's session tokens, cookies, or other sensitive information.\n\n**Note** This vulnerability applies to installations where the non-default `SafeList.preserveRelativeLinks` option is enabled and the HTML site does not have a Content Security Policy is in place."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","external/cwe/cwe-79","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-43466 thymeleaf-spring5 3.0.11.RELEASE: Spring Boot 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: thymeleaf-spring5 3.0.11.RELEASE thru Spring Boot 2.2.2.RELEASE (CVE-2021-43466 BDSA-2021-4619)"},"fullDescription":{"text":"thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n\u003e Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered — which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection."},"help":{"markdown":"# CVE-2021-43466 thymeleaf-spring5 3.0.11.RELEASE: Spring Boot 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nthymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n\u003e Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered — which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-43466](https://nvd.nist.gov/vuln/detail/CVE-2021-43466)\n\n### BDSA: [H] [BDSA-2021-4619](https://nvd.nist.gov/vuln/detail/BDSA-2021-4619)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-95](https://cwe.mitre.org/data/definitions/95.html\n\n","text":"thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n\u003e Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered — which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-95","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-1745 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2020-1745 BDSA-2020-0483)"},"fullDescription":{"text":"Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE)."},"help":{"markdown":"# CVE-2020-1745 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE).\n\n## CVE/BDSA info\n### CVE: [C] [CVE-2020-1745](https://nvd.nist.gov/vuln/detail/CVE-2020-1745)\n\n### BDSA: [C] [BDSA-2020-0483](https://nvd.nist.gov/vuln/detail/BDSA-2020-0483)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html\n\n","text":"Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-284","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-10687 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2020-10687 BDSA-2020-2102)"},"fullDescription":{"text":"It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"help":{"markdown":"# CVE-2020-10687 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nIt was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2020-10687](https://nvd.nist.gov/vuln/detail/CVE-2020-10687)\n\n### BDSA: [H] [BDSA-2020-2102](https://nvd.nist.gov/vuln/detail/BDSA-2020-2102)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html\n\n","text":"It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-444","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-20220 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2021-20220 BDSA-2021-0444)"},"fullDescription":{"text":"Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"help":{"markdown":"# CVE-2021-20220 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure.\n\n## CVE/BDSA info\n### CVE: [H] [CVE-2021-20220](https://nvd.nist.gov/vuln/detail/CVE-2021-20220)\n\n### BDSA: [H] [BDSA-2021-0444](https://nvd.nist.gov/vuln/detail/BDSA-2021-0444)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html\n\n","text":"Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-444","patch_available"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-1757 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2020-1757 BDSA-2019-4367)"},"fullDescription":{"text":"Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks."},"help":{"markdown":"# CVE-2020-1757 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-1757](https://nvd.nist.gov/vuln/detail/CVE-2020-1757)\n\n### BDSA: [M] [BDSA-2019-4367](https://nvd.nist.gov/vuln/detail/BDSA-2019-4367)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-20","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-1259 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2022-1259 BDSA-2022-2100)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)"},"help":{"markdown":"# CVE-2022-1259 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2022-1259](https://nvd.nist.gov/vuln/detail/CVE-2022-1259)\n\n### BDSA: [M] [BDSA-2022-2100](https://nvd.nist.gov/vuln/detail/BDSA-2022-2100)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)"},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-10705 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2020-10705 BDSA-2020-1151)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server."},"help":{"markdown":"# CVE-2020-10705 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-10705](https://nvd.nist.gov/vuln/detail/CVE-2020-10705)\n\n### BDSA: [M] [BDSA-2020-1151](https://nvd.nist.gov/vuln/detail/BDSA-2020-1151)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-401](https://cwe.mitre.org/data/definitions/401.html\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-401","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-3859 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2021-3859 BDSA-2022-0318)"},"fullDescription":{"text":"Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS)."},"help":{"markdown":"# CVE-2021-3859 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS).\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-3859](https://nvd.nist.gov/vuln/detail/CVE-2021-3859)\n\n### BDSA: [M] [BDSA-2022-0318](https://nvd.nist.gov/vuln/detail/BDSA-2022-0318)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-3629 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2021-3629 BDSA-2021-3463)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**."},"help":{"markdown":"# CVE-2021-3629 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-3629](https://nvd.nist.gov/vuln/detail/CVE-2021-3629)\n\n### BDSA: [M] [BDSA-2021-3463](https://nvd.nist.gov/vuln/detail/BDSA-2021-3463)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-3597 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2021-3597 BDSA-2021-2789)"},"fullDescription":{"text":"Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition."},"help":{"markdown":"# CVE-2021-3597 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-3597](https://nvd.nist.gov/vuln/detail/CVE-2021-3597)\n\n### BDSA: [M] [BDSA-2021-2789](https://nvd.nist.gov/vuln/detail/BDSA-2021-2789)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-3690 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2021-3690 BDSA-2021-2615)"},"fullDescription":{"text":"undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests."},"help":{"markdown":"# CVE-2021-3690 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nundertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2021-3690](https://nvd.nist.gov/vuln/detail/CVE-2021-3690)\n\n### BDSA: [M] [BDSA-2021-2615](https://nvd.nist.gov/vuln/detail/BDSA-2021-2615)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-4041 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (BDSA-2022-4041)"},"fullDescription":{"text":"Undertow contains a server identity spoofing vulnerability. This issue exists due to the Undertow client not checking the server identity presented by the server certificate in HTTPS connections, leading it to accept certificates with arbitrary subjects."},"help":{"markdown":"# BDSA-2022-4041 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow contains a server identity spoofing vulnerability. This issue exists due to the Undertow client not checking the server identity presented by the server certificate in HTTPS connections, leading it to accept certificates with arbitrary subjects.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2022-4041](https://nvd.nist.gov/vuln/detail/BDSA-2022-4041)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-295](https://cwe.mitre.org/data/definitions/295.html\n\n","text":"Undertow contains a server identity spoofing vulnerability. This issue exists due to the Undertow client not checking the server identity presented by the server certificate in HTTPS connections, leading it to accept certificates with arbitrary subjects."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-295","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27782 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2020-27782 BDSA-2021-0208)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition."},"help":{"markdown":"# CVE-2020-27782 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2020-27782](https://nvd.nist.gov/vuln/detail/CVE-2020-27782)\n\n### BDSA: [M] [BDSA-2021-0208](https://nvd.nist.gov/vuln/detail/BDSA-2021-0208)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-1108 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2023-1108 BDSA-2023-0526)"},"fullDescription":{"text":"Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS)."},"help":{"markdown":"# CVE-2023-1108 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS).\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2023-1108](https://nvd.nist.gov/vuln/detail/CVE-2023-1108)\n\n### BDSA: [M] [BDSA-2023-0526](https://nvd.nist.gov/vuln/detail/BDSA-2023-0526)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html\n\n","text":"Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-835","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2019-14888 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2019-14888 BDSA-2020-0115)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port."},"help":{"markdown":"# CVE-2019-14888 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port.\n\n## CVE/BDSA info\n### CVE: [M] [CVE-2019-14888](https://nvd.nist.gov/vuln/detail/CVE-2019-14888)\n\n### BDSA: [M] [BDSA-2020-0115](https://nvd.nist.gov/vuln/detail/BDSA-2020-0115)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2053 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2022-2053 BDSA-2022-2085)"},"fullDescription":{"text":"Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS)."},"help":{"markdown":"# CVE-2022-2053 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS).\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2022-2053](https://nvd.nist.gov/vuln/detail/CVE-2022-2053)\n\n### BDSA: [L] [BDSA-2022-2085](https://nvd.nist.gov/vuln/detail/BDSA-2022-2085)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-248](https://cwe.mitre.org/data/definitions/248.html\n\n","text":"Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS)."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-248","patch_available"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2022-2764 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","shortDescription":{"text":"[T] Dependency: undertow 2.0.28 thru Spring Boot Undertow Starter 2.2.2.RELEASE (CVE-2022-2764 BDSA-2022-2482)"},"fullDescription":{"text":"Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash."},"help":{"markdown":"# CVE-2022-2764 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE\n## Upgrade Guidance\n\n**Short Term** - 2.7.16\n\n**Long Term** - 3.1.4\n\n## Description\nUndertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash.\n\n## CVE/BDSA info\n### CVE: [L] [CVE-2022-2764](https://nvd.nist.gov/vuln/detail/CVE-2022-2764)\n\n### BDSA: [L] [BDSA-2022-2482](https://nvd.nist.gov/vuln/detail/BDSA-2022-2482)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","external/cwe/cwe-400","patch_available"]},"defaultConfiguration":{"level":"note"}}]}},"results":[{"message":{"text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2018-1836 Apache Ant 1.6.2","partialFingerprints":{"primaryLocationLineHash":"f2dca2ab021bd5d3147c53aa48365ee16505f67e24b4f83eadb214ee4ced2624"}},{"message":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2021-2083 Apache Ant 1.6.2","partialFingerprints":{"primaryLocationLineHash":"f2dca2ab021bd5d3147c53aa48365ee16505f67e24b4f83eadb214ee4ced2624"}},{"message":{"text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2012-0078 Apache Ant 1.6.2","partialFingerprints":{"primaryLocationLineHash":"f2dca2ab021bd5d3147c53aa48365ee16505f67e24b4f83eadb214ee4ced2624"}},{"message":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"CVE-2020-1945 Apache Ant 1.6.2","partialFingerprints":{"primaryLocationLineHash":"f2dca2ab021bd5d3147c53aa48365ee16505f67e24b4f83eadb214ee4ced2624"}},{"message":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2020-2577 Apache Ant 1.6.2","partialFingerprints":{"primaryLocationLineHash":"f2dca2ab021bd5d3147c53aa48365ee16505f67e24b4f83eadb214ee4ced2624"}},{"message":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2021-2085 Apache Ant 1.6.2","partialFingerprints":{"primaryLocationLineHash":"f2dca2ab021bd5d3147c53aa48365ee16505f67e24b4f83eadb214ee4ced2624"}},{"message":{"text":"Apache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":128}}}],"ruleId":"CVE-2021-29425 Apache Commons IO 2.6","partialFingerprints":{"primaryLocationLineHash":"a166c60668168928eca8a647dfd8ff6184dc75ecceccb1fe4d8235fbb6ba07bd"}},{"message":{"text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-17521 Apache Groovy 2.5.8: REST Assured 3.3.0","partialFingerprints":{"primaryLocationLineHash":"e9dd028ac19b29e1273e94cd855ba0e0992fd0b8b6ba96e43516b806915613db"}},{"message":{"text":"Apache HttpClient is vulnerable to the disclosure and modification of data due to the mishandling of malformed URIs. An attacker could pass a maliciously crafted request to a vulnerable application, which will then be executed on an incorrect host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-13956 Apache HttpClient 4.5.10: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"33bdaed77cb78fdcf8991de026faa12973f9c9a5f51693da0792b70bb2275782"}},{"message":{"text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-20676 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"c1d1524d7f7f0b98b4f832d345b1761534dba715ada01b2812e1f6d146aebd1c"}},{"message":{"text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2016-10735 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"c1d1524d7f7f0b98b4f832d345b1761534dba715ada01b2812e1f6d146aebd1c"}},{"message":{"text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-20677 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"c1d1524d7f7f0b98b4f832d345b1761534dba715ada01b2812e1f6d146aebd1c"}},{"message":{"text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2019-8331 Bootstrap (Twitter) 3.0.2: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"c1d1524d7f7f0b98b4f832d345b1761534dba715ada01b2812e1f6d146aebd1c"}},{"message":{"text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2019-0423 Bootstrap (Twitter) v4.2.0: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"13cf69c41a3430589651940dda2868bfe4588f8887353047e06e47c6dc1e91e6"}},{"message":{"text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":78}}}],"ruleId":"CVE-2019-8331 Bootstrap (Twitter) 3.3.7","partialFingerprints":{"primaryLocationLineHash":"b1473e16a88d0bfa7ec9b43a9cd918e151177c90e8bb37f8ea62707df55c18a1"}},{"message":{"text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":78}}}],"ruleId":"CVE-2018-20676 Bootstrap (Twitter) 3.3.7","partialFingerprints":{"primaryLocationLineHash":"b1473e16a88d0bfa7ec9b43a9cd918e151177c90e8bb37f8ea62707df55c18a1"}},{"message":{"text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":78}}}],"ruleId":"CVE-2018-20677 Bootstrap (Twitter) 3.3.7","partialFingerprints":{"primaryLocationLineHash":"b1473e16a88d0bfa7ec9b43a9cd918e151177c90e8bb37f8ea62707df55c18a1"}},{"message":{"text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":78}}}],"ruleId":"CVE-2016-10735 Bootstrap (Twitter) 3.3.7","partialFingerprints":{"primaryLocationLineHash":"b1473e16a88d0bfa7ec9b43a9cd918e151177c90e8bb37f8ea62707df55c18a1"}},{"message":{"text":"Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-25638 Hibernate ORM 5.4.9: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"96103241073235ea2b1bd0a010c197b11a18d997c95c868867d50e88c820e820"}},{"message":{"text":"Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2019-14900 Hibernate ORM 5.4.9: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"96103241073235ea2b1bd0a010c197b11a18d997c95c868867d50e88c820e820"}},{"message":{"text":"Hibernate Validator is vulnerable to incorrectly validating certain expression language (EL) expressions. A remote attacker could leverage this to bypass input sanitization"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-10693 Hibernate Validator 6.0.18.Final: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2b4b0cbffee6cf69d8b63485c67b9e184291914937e52fd199069a77e5ba3eb1"}},{"message":{"text":"HyperSQL DataBase is vulnerable to remote code execution (RCE) due to improper input validation thus allowing unsafe reflection. An authenticated attacker could exploit this by supplying a crafted input to potentially execute code on the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-41853 HyperSQL Database Engine 2.5.0","partialFingerprints":{"primaryLocationLineHash":"63125b2f08ad8ad9c0c83ed63bcb931597b738e652cb2420e7316781520be2fa"}},{"message":{"text":"JUnit4 is vulnerable to information disclosure via the `TemporaryFolder` directory. A local user could exploit this vulnerability in order to read files and directories stored within this directory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":130}}}],"ruleId":"CVE-2020-15250 JUnit 4.12","partialFingerprints":{"primaryLocationLineHash":"633880673cea9b2b570f8736274c87755a7e732d46a08bc83c22da699344dca7"}},{"message":{"text":"Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-2110 Jakarta Expression Language 3.0 Implementation 3.0.3: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"d300534a418610419f1426e04971bc861b7f40d1d16e530d97b64da42e72d661"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2023-2721 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 Jetty: Java based HTTP/1.x, HTTP/2, Servlet, WebSocket Server 9.4.24.v20191120: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"f1ca77695b6de60361ecc6d86c7bd04b48981c692e6bb3c556eb5f93a68ae792"}},{"message":{"text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-42550 Logback 1.2.3: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"db81b09c671c02f2ddecccd30782681894558c716088f9ae193d9ac74e65ae7d"}},{"message":{"text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3401 Logback 1.2.3: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"db81b09c671c02f2ddecccd30782681894558c716088f9ae193d9ac74e65ae7d"}},{"message":{"text":"pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-26520 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","partialFingerprints":{"primaryLocationLineHash":"8390c0554406809f5af55f5f4135fb78ae330a471fbdc989af0353092b84694a"}},{"message":{"text":"PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-13692 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","partialFingerprints":{"primaryLocationLineHash":"8390c0554406809f5af55f5f4135fb78ae330a471fbdc989af0353092b84694a"}},{"message":{"text":"pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-21724 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","partialFingerprints":{"primaryLocationLineHash":"8390c0554406809f5af55f5f4135fb78ae330a471fbdc989af0353092b84694a"}},{"message":{"text":"The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-31197 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","partialFingerprints":{"primaryLocationLineHash":"8390c0554406809f5af55f5f4135fb78ae330a471fbdc989af0353092b84694a"}},{"message":{"text":"PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-41946 PostgreSQL JDBC Driver (pgjdbc) 42.2.8","partialFingerprints":{"primaryLocationLineHash":"8390c0554406809f5af55f5f4135fb78ae330a471fbdc989af0353092b84694a"}},{"message":{"text":"SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-1471 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"e3e1ad759a3cd5ff1d75386034561a8a2214be66335fd33733a447d6237b97de"}},{"message":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-25857 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"e3e1ad759a3cd5ff1d75386034561a8a2214be66335fd33733a447d6237b97de"}},{"message":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-38751 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"e3e1ad759a3cd5ff1d75386034561a8a2214be66335fd33733a447d6237b97de"}},{"message":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-38752 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"e3e1ad759a3cd5ff1d75386034561a8a2214be66335fd33733a447d6237b97de"}},{"message":{"text":"Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-41854 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"e3e1ad759a3cd5ff1d75386034561a8a2214be66335fd33733a447d6237b97de"}},{"message":{"text":"SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2017-18640 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"e3e1ad759a3cd5ff1d75386034561a8a2214be66335fd33733a447d6237b97de"}},{"message":{"text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-38749 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"e3e1ad759a3cd5ff1d75386034561a8a2214be66335fd33733a447d6237b97de"}},{"message":{"text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-38750 SnakeYAML 1.25: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"e3e1ad759a3cd5ff1d75386034561a8a2214be66335fd33733a447d6237b97de"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 Spring Boot 2.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 Spring Boot 2.2.2.RELEASE: Spring Boot Developer Tools 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6f79041981a33c348884a4776702cc8a4e00f3160f6ed650b4ce971bee08ccf9"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0856 Spring Boot Developer Tools 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6141a9d00a56b366e44fbefb812acb5ab6b4eb79a2e785563a88254a08652b81"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0847 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5397 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5398 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22096 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22060 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22950 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22118 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22970 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22971 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20861 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20863 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5421 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22968 Spring Framework 5.2.2.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"6e912ef2370ba0905e214c801b4cf32f8830f89ac733b895f5997f7f6496063e"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"b866aa4851e45d39cadae940dc9522f11df1155af801248bb1c099f95b586684"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1: Spring Security 4.1.3","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2023-1825 Spring Security 5.2.1","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-3109 Spring Security 5.2.1","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22978 Spring Security 5.2.1","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22976 Spring Security 5.2.1","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22119 Spring Security 5.2.1","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22112 Spring Security 5.2.1","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5408 Spring Security 5.2.1","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5407 Spring Security 5.2.1","partialFingerprints":{"primaryLocationLineHash":"7afc36d4e7fa149c6a23b2dc228adaf27bb84c34afe5da24ca15d034c8bddea6"}},{"message":{"text":"Wiremock is vulnerable to XML external entity (XXE) attacks due to weak configuration of XML parsing. An attacker can retrieve files outside the web root, execute arbitrary code or cause a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-9116 WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"05dcd2cb5b31467c0a1752cb2cb3bcf5bb9fca5ec837ef7357e1622ab1a64ceb"}},{"message":{"text":"WireMock is vulnerable to a server-side request forgery (SSRF) due to improper restrictive configuration of the DNS resolver within the processing of webhooks. Successful exploitation of this issue could allow an unauthenticated attacker to trick a user into initiating a POST request via an arbitrary webhook to an outbound network, in order to obtain access to internal resources."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41327 WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"05dcd2cb5b31467c0a1752cb2cb3bcf5bb9fca5ec837ef7357e1622ab1a64ceb"}},{"message":{"text":"WireMock contains an absolute path traversal vulnerability where an attacker is able to access local files and potentially disclose sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-9117 WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"05dcd2cb5b31467c0a1752cb2cb3bcf5bb9fca5ec837ef7357e1622ab1a64ceb"}},{"message":{"text":"WireMock contains a domain restriction bypass vulnerability due to insufficient validation of allowed address rules. Successful exploitation of this issue enables a highly privileged attacker that has control over a DNS service to bypass domain restriction and gain unauthorized access."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41329 WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"05dcd2cb5b31467c0a1752cb2cb3bcf5bb9fca5ec837ef7357e1622ab1a64ceb"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39147 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2013-7285 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39139 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39148 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2020-26217 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39141 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39154 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39144 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39145 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39146 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39150 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21344 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21349 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21345 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21346 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21342 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21350 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-29505 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39149 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39151 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21351 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2020-26258 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39153 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2020-26259 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2016-3674 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39152 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21347 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39140 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21341 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21348 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21343 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2017-7957 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-43859 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2022-40151 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2022-41966 XStream 1.4.5","partialFingerprints":{"primaryLocationLineHash":"4ce71f5a7d3c7beac53b78628a93c16c211f1fa352e519097b2d6941dd7eae2d"}},{"message":{"text":"Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-10683 dom4j: flexible XML framework for Java 2.1.1: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"618cd0c4df2e14c6b61dd609d92a51d66e9cd461809d6c62fc8df9fe996ad0fa"}},{"message":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":129}}}],"ruleId":"CVE-2018-10237 google-guava 18.0","partialFingerprints":{"primaryLocationLineHash":"a8fc4f1f640f1dd30696c9cdbb088651983a3cb407a19c3a410cf40f2defc8f8"}},{"message":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":129}}}],"ruleId":"CVE-2023-2976 google-guava 18.0","partialFingerprints":{"primaryLocationLineHash":"a8fc4f1f640f1dd30696c9cdbb088651983a3cb407a19c3a410cf40f2defc8f8"}},{"message":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":129}}}],"ruleId":"CVE-2020-8908 google-guava 18.0","partialFingerprints":{"primaryLocationLineHash":"a8fc4f1f640f1dd30696c9cdbb088651983a3cb407a19c3a410cf40f2defc8f8"}},{"message":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-10237 google-guava 20.0: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"55c83e52f6f8895b11b3f59376033fe1a10f205595e6b04046e3a107f0839843"}},{"message":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-2976 google-guava 20.0: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"55c83e52f6f8895b11b3f59376033fe1a10f205595e6b04046e3a107f0839843"}},{"message":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-8908 google-guava 20.0: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"55c83e52f6f8895b11b3f59376033fe1a10f205595e6b04046e3a107f0839843"}},{"message":{"text":"jQuery is vulnerable to cross-site scripting (XSS) due to a flaw present in Document Object Model (DOM) manipulation methods.\n\nAn attacker could craft HTML content that when viewed by a victim user could allow for the execution of arbitrary scripts. Such scripts could be used to steal tokens or tamper with the rendering of the web content.\n\n**Note**: This reported issue appears to be a duplicate of **CVE-2020-11023** (**BDSA-2020-0964**)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"CVE-2020-23064 jQuery 3.2.1","partialFingerprints":{"primaryLocationLineHash":"2aeb0b5137926d13c641904dfdc33c4d713dd6cfb60faaeb8b840bfc04e1487b"}},{"message":{"text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if certain HTML is passed to Document Object Model (DOM) manipulation methods. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"CVE-2020-11023 jQuery 3.2.1","partialFingerprints":{"primaryLocationLineHash":"2aeb0b5137926d13c641904dfdc33c4d713dd6cfb60faaeb8b840bfc04e1487b"}},{"message":{"text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if `jQuery.htmlPrefilter` method is used. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target's browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"CVE-2020-11022 jQuery 3.2.1","partialFingerprints":{"primaryLocationLineHash":"2aeb0b5137926d13c641904dfdc33c4d713dd6cfb60faaeb8b840bfc04e1487b"}},{"message":{"text":"An improper input validation vulnerability has been discovered in JQuery. An attacker could exploit this vulnerability to execute cross-site scripting (XSS) attacks, trigger a denial-of-service (DoS) condition, or gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"CVE-2019-11358 jQuery 3.2.1","partialFingerprints":{"primaryLocationLineHash":"2aeb0b5137926d13c641904dfdc33c4d713dd6cfb60faaeb8b840bfc04e1487b"}},{"message":{"text":"jQuery contains commented references to the hijacked domain `blindsignals`, within the files `src/queue/delay.js` and `test/data/jquery-1.9.1.js` (the former referring to a Web Archive version of the original site). Users without awareness of the domain's status could be exposed to unspecified attacks if they attempt to follow the links to the hijacked site."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"BDSA-2021-3651 jQuery 3.2.1","partialFingerprints":{"primaryLocationLineHash":"2aeb0b5137926d13c641904dfdc33c4d713dd6cfb60faaeb8b840bfc04e1487b"}},{"message":{"text":"Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-25649 jackson-databind 2.10.1: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"51b743504d10d32ba5db7ebf288c4ccf01d80eada93badf6ee5eb740e285d03d"}},{"message":{"text":"jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-36518 jackson-databind 2.10.1: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"51b743504d10d32ba5db7ebf288c4ccf01d80eada93badf6ee5eb740e285d03d"}},{"message":{"text":"jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-46877 jackson-databind 2.10.1: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"51b743504d10d32ba5db7ebf288c4ccf01d80eada93badf6ee5eb740e285d03d"}},{"message":{"text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-42003 jackson-databind 2.10.1: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"51b743504d10d32ba5db7ebf288c4ccf01d80eada93badf6ee5eb740e285d03d"}},{"message":{"text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-42004 jackson-databind 2.10.1: WireMock 2.8.0","partialFingerprints":{"primaryLocationLineHash":"51b743504d10d32ba5db7ebf288c4ccf01d80eada93badf6ee5eb740e285d03d"}},{"message":{"text":"A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-27568 json-smart 2.3: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"31c737e3d6da3a303cae99a5efa57d27cac3be78195355a4ec8281ec9c7671af"}},{"message":{"text":"json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-1370 json-smart 2.3: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"31c737e3d6da3a303cae99a5efa57d27cac3be78195355a4ec8281ec9c7671af"}},{"message":{"text":"jsoup is vulnerable to denial-of-service (DoS) due to flaws in its parsing component. A remote attacker could impact the performance of the application, or cause it to crash, by sending maliciously crafted HTML or XML documents to a vulnerable endpoint."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/cross-site-scripting/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-37714 jsoup 1.11.3","partialFingerprints":{"primaryLocationLineHash":"88a3349ce87facb454ad80df901e23293a891760eef5792071f6f84c390d041d"}},{"message":{"text":"Jsoup has a cross-site scripting (XSS) vulnerability due to an absence of correct parameter input validation. A remote attacker could insert JavaScript code into dynamically generated content in order to steal a victim's session tokens, cookies, or other sensitive information.\n\n**Note** This vulnerability applies to installations where the non-default `SafeList.preserveRelativeLinks` option is enabled and the HTML site does not have a Content Security Policy is in place."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/cross-site-scripting/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-36033 jsoup 1.11.3","partialFingerprints":{"primaryLocationLineHash":"88a3349ce87facb454ad80df901e23293a891760eef5792071f6f84c390d041d"}},{"message":{"text":"thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n\u003e Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered — which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-43466 thymeleaf-spring5 3.0.11.RELEASE: Spring Boot 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"152f104806bfe30660824df451fc981ce6688008131443a3f3f12ee0d36d6ec7"}},{"message":{"text":"Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-1745 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-10687 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-20220 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-1757 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-1259 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-10705 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-3859 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-3629 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-3597 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-3690 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow contains a server identity spoofing vulnerability. This issue exists due to the Undertow client not checking the server identity presented by the server certificate in HTTPS connections, leading it to accept certificates with arbitrary subjects."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-4041 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-27782 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-1108 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2019-14888 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-2053 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}},{"message":{"text":"Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-2764 undertow 2.0.28: Spring Boot Undertow Starter 2.2.2.RELEASE","partialFingerprints":{"primaryLocationLineHash":"2bf7f594e32bb1d2710d715225ff0f574e33a35c3b9b79c5d692fb0cceca5e14"}}]}],"version":"2.1.0"}